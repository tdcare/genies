{"$message_type":"diagnostic","message":"`proc-macro` crate types currently cannot export any items other than functions tagged with `#[proc_macro]`, `#[proc_macro_derive]`, or `#[proc_macro_attribute]`","code":null,"level":"error","spans":[{"file_name":"crates\\genies_derive\\src\\lib.rs","byte_start":19721,"byte_end":19741,"line_start":468,"line_end":468,"column_start":1,"column_end":21,"is_primary":true,"text":[{"text":"pub enum ConfigError {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: `proc-macro` crate types currently cannot export any items other than functions tagged with `#[proc_macro]`, `#[proc_macro_derive]`, or `#[proc_macro_attribute]`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mcrates\\genies_derive\\src\\lib.rs:468:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m468\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub enum ConfigError {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`proc-macro` crate types currently cannot export any items other than functions tagged with `#[proc_macro]`, `#[proc_macro_derive]`, or `#[proc_macro_attribute]`","code":null,"level":"error","spans":[{"file_name":"crates\\genies_derive\\src\\lib.rs","byte_start":20262,"byte_end":20284,"line_start":493,"line_end":493,"column_start":1,"column_end":23,"is_primary":true,"text":[{"text":"pub trait ConfigReload {","highlight_start":1,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: `proc-macro` crate types currently cannot export any items other than functions tagged with `#[proc_macro]`, `#[proc_macro_derive]`, or `#[proc_macro_attribute]`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mcrates\\genies_derive\\src\\lib.rs:493:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m493\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait ConfigReload {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`proc-macro` crate types currently cannot export any items other than functions tagged with `#[proc_macro]`, `#[proc_macro_derive]`, or `#[proc_macro_attribute]`","code":null,"level":"error","spans":[{"file_name":"crates\\genies_derive\\src\\lib.rs","byte_start":20379,"byte_end":20405,"line_start":498,"line_end":498,"column_start":1,"column_end":27,"is_primary":true,"text":[{"text":"pub trait ConfigConvert<T> {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: `proc-macro` crate types currently cannot export any items other than functions tagged with `#[proc_macro]`, `#[proc_macro_derive]`, or `#[proc_macro_attribute]`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mcrates\\genies_derive\\src\\lib.rs:498:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m498\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait ConfigConvert<T> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `ToTokens`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"crates\\genies_derive\\src\\lib.rs","byte_start":48,"byte_end":56,"line_start":2,"line_end":2,"column_start":20,"column_end":28,"is_primary":true,"text":[{"text":"use quote::{quote, ToTokens}; ","highlight_start":20,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"crates\\genies_derive\\src\\lib.rs","byte_start":40,"byte_end":41,"line_start":2,"line_end":2,"column_start":12,"column_end":13,"is_primary":true,"text":[{"text":"use quote::{quote, ToTokens}; ","highlight_start":12,"highlight_end":13}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"crates\\genies_derive\\src\\lib.rs","byte_start":46,"byte_end":56,"line_start":2,"line_end":2,"column_start":18,"column_end":28,"is_primary":true,"text":[{"text":"use quote::{quote, ToTokens}; ","highlight_start":18,"highlight_end":28}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"crates\\genies_derive\\src\\lib.rs","byte_start":56,"byte_end":57,"line_start":2,"line_end":2,"column_start":28,"column_end":29,"is_primary":true,"text":[{"text":"use quote::{quote, ToTokens}; ","highlight_start":28,"highlight_end":29}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused import: `ToTokens`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mcrates\\genies_derive\\src\\lib.rs:2:20\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m2\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse quote::{quote, ToTokens}; \u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused imports: `Attribute`, `Ident`, and `Type`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"crates\\genies_derive\\src\\lib.rs","byte_start":116,"byte_end":120,"line_start":3,"line_end":3,"column_start":57,"column_end":61,"is_primary":true,"text":[{"text":"use syn::{parse_macro_input, DeriveInput, Data, Fields, Type, Ident, Attribute};","highlight_start":57,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"crates\\genies_derive\\src\\lib.rs","byte_start":122,"byte_end":127,"line_start":3,"line_end":3,"column_start":63,"column_end":68,"is_primary":true,"text":[{"text":"use syn::{parse_macro_input, DeriveInput, Data, Fields, Type, Ident, Attribute};","highlight_start":63,"highlight_end":68}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"crates\\genies_derive\\src\\lib.rs","byte_start":129,"byte_end":138,"line_start":3,"line_end":3,"column_start":70,"column_end":79,"is_primary":true,"text":[{"text":"use syn::{parse_macro_input, DeriveInput, Data, Fields, Type, Ident, Attribute};","highlight_start":70,"highlight_end":79}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused imports","code":null,"level":"help","spans":[{"file_name":"crates\\genies_derive\\src\\lib.rs","byte_start":114,"byte_end":138,"line_start":3,"line_end":3,"column_start":55,"column_end":79,"is_primary":true,"text":[{"text":"use syn::{parse_macro_input, DeriveInput, Data, Fields, Type, Ident, Attribute};","highlight_start":55,"highlight_end":79}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused imports: `Attribute`, `Ident`, and `Type`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mcrates\\genies_derive\\src\\lib.rs:3:57\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse syn::{parse_macro_input, DeriveInput, Data, Fields, Type, Ident, Attribute};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `std::str::FromStr`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"crates\\genies_derive\\src\\lib.rs","byte_start":179,"byte_end":196,"line_start":5,"line_end":5,"column_start":5,"column_end":22,"is_primary":true,"text":[{"text":"use std::str::FromStr;","highlight_start":5,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"crates\\genies_derive\\src\\lib.rs","byte_start":175,"byte_end":198,"line_start":5,"line_end":6,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use std::str::FromStr;","highlight_start":1,"highlight_end":23},{"text":"","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused import: `std::str::FromStr`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mcrates\\genies_derive\\src\\lib.rs:5:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m5\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse std::str::FromStr;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Vec<Attribute>: ToTokens` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":34208,"byte_end":34213,"line_start":951,"line_end":951,"column_start":37,"column_end":42,"is_primary":true,"text":[{"text":"        $crate::ToTokens::to_tokens(&$var, &mut $tokens);","highlight_start":37,"highlight_end":42}],"label":"the trait `ToTokens` is not implemented for `Vec<Attribute>`, which is required by `RepInterp<&&Vec<Attribute>>: ToTokens`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":30697,"byte_end":30769,"line_start":870,"line_end":870,"column_start":13,"column_end":85,"is_primary":false,"text":[{"text":"            $crate::quote_token_with_context!{$tokens $b3 $b2 $b1 $curr $a1 $a2 $a3}","highlight_start":13,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":29605,"byte_end":29904,"line_start":831,"line_end":839,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        $crate::quote_tokens_with_context!{$tokens","highlight_start":9,"highlight_end":51},{"text":"            (@ @ @ @ @ @ $($tts)*)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ @ $($tts)* @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ $($tts)* @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ $(($tts))* @ @ @)","highlight_start":1,"highlight_end":37},{"text":"            (@ @ $($tts)* @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ $($tts)* @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            ($($tts)* @ @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":18514,"byte_end":18551,"line_start":528,"line_end":528,"column_start":13,"column_end":50,"is_primary":false,"text":[{"text":"            $crate::quote_each_token!{_s $($tt)*}","highlight_start":13,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":38346,"byte_end":38372,"line_start":1053,"line_end":1053,"column_start":13,"column_end":39,"is_primary":false,"text":[{"text":"            $crate::quote!($($inner)*),","highlight_start":13,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":34489,"byte_end":34524,"line_start":958,"line_end":958,"column_start":9,"column_end":44,"is_primary":false,"text":[{"text":"        $crate::quote_token!{$curr $tokens}","highlight_start":9,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":30697,"byte_end":30769,"line_start":870,"line_end":870,"column_start":13,"column_end":85,"is_primary":false,"text":[{"text":"            $crate::quote_token_with_context!{$tokens $b3 $b2 $b1 $curr $a1 $a2 $a3}","highlight_start":13,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":29605,"byte_end":29904,"line_start":831,"line_end":839,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        $crate::quote_tokens_with_context!{$tokens","highlight_start":9,"highlight_end":51},{"text":"            (@ @ @ @ @ @ $($tts)*)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ @ $($tts)* @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ $($tts)* @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ $(($tts))* @ @ @)","highlight_start":1,"highlight_end":37},{"text":"            (@ @ $($tts)* @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ $($tts)* @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            ($($tts)* @ @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":32425,"byte_end":32470,"line_start":912,"line_end":912,"column_start":13,"column_end":58,"is_primary":false,"text":[{"text":"            $crate::quote_each_token!{$tokens $($inner)*}","highlight_start":13,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":30697,"byte_end":30769,"line_start":870,"line_end":870,"column_start":13,"column_end":85,"is_primary":false,"text":[{"text":"            $crate::quote_token_with_context!{$tokens $b3 $b2 $b1 $curr $a1 $a2 $a3}","highlight_start":13,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":29605,"byte_end":29904,"line_start":831,"line_end":839,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        $crate::quote_tokens_with_context!{$tokens","highlight_start":9,"highlight_end":51},{"text":"            (@ @ @ @ @ @ $($tts)*)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ @ $($tts)* @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ $($tts)* @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ $(($tts))* @ @ @)","highlight_start":1,"highlight_end":37},{"text":"            (@ @ $($tts)* @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ $($tts)* @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            ($($tts)* @ @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":18514,"byte_end":18551,"line_start":528,"line_end":528,"column_start":13,"column_end":50,"is_primary":false,"text":[{"text":"            $crate::quote_each_token!{_s $($tt)*}","highlight_start":13,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":38346,"byte_end":38372,"line_start":1053,"line_end":1053,"column_start":13,"column_end":39,"is_primary":false,"text":[{"text":"            $crate::quote!($($inner)*),","highlight_start":13,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":34489,"byte_end":34524,"line_start":958,"line_end":958,"column_start":9,"column_end":44,"is_primary":false,"text":[{"text":"        $crate::quote_token!{$curr $tokens}","highlight_start":9,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":30697,"byte_end":30769,"line_start":870,"line_end":870,"column_start":13,"column_end":85,"is_primary":false,"text":[{"text":"            $crate::quote_token_with_context!{$tokens $b3 $b2 $b1 $curr $a1 $a2 $a3}","highlight_start":13,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":29605,"byte_end":29904,"line_start":831,"line_end":839,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        $crate::quote_tokens_with_context!{$tokens","highlight_start":9,"highlight_end":51},{"text":"            (@ @ @ @ @ @ $($tts)*)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ @ $($tts)* @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ $($tts)* @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ $(($tts))* @ @ @)","highlight_start":1,"highlight_end":37},{"text":"            (@ @ $($tts)* @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ $($tts)* @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            ($($tts)* @ @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":18514,"byte_end":18551,"line_start":528,"line_end":528,"column_start":13,"column_end":50,"is_primary":false,"text":[{"text":"            $crate::quote_each_token!{_s $($tt)*}","highlight_start":13,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":38346,"byte_end":38372,"line_start":1053,"line_end":1053,"column_start":13,"column_end":39,"is_primary":false,"text":[{"text":"            $crate::quote!($($inner)*),","highlight_start":13,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":34489,"byte_end":34524,"line_start":958,"line_end":958,"column_start":9,"column_end":44,"is_primary":false,"text":[{"text":"        $crate::quote_token!{$curr $tokens}","highlight_start":9,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":30697,"byte_end":30769,"line_start":870,"line_end":870,"column_start":13,"column_end":85,"is_primary":false,"text":[{"text":"            $crate::quote_token_with_context!{$tokens $b3 $b2 $b1 $curr $a1 $a2 $a3}","highlight_start":13,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":29605,"byte_end":29904,"line_start":831,"line_end":839,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        $crate::quote_tokens_with_context!{$tokens","highlight_start":9,"highlight_end":51},{"text":"            (@ @ @ @ @ @ $($tts)*)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ @ $($tts)* @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ $($tts)* @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ $(($tts))* @ @ @)","highlight_start":1,"highlight_end":37},{"text":"            (@ @ $($tts)* @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ $($tts)* @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            ($($tts)* @ @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":18514,"byte_end":18551,"line_start":528,"line_end":528,"column_start":13,"column_end":50,"is_primary":false,"text":[{"text":"            $crate::quote_each_token!{_s $($tt)*}","highlight_start":13,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"crates\\genies_derive\\src\\lib.rs","byte_start":2221,"byte_end":19604,"line_start":70,"line_end":461,"column_start":20,"column_end":6,"is_primary":false,"text":[{"text":"    let expanded = quote! {","highlight_start":20,"highlight_end":28},{"text":"        impl #name {","highlight_start":1,"highlight_end":21},{"text":"            /// Validate the configuration","highlight_start":1,"highlight_end":43},{"text":"            pub fn validate(&self) -> Result<(), ConfigError> {","highlight_start":1,"highlight_end":64},{"text":"                #(","highlight_start":1,"highlight_end":19},{"text":"                    if let Err(e) = self.validate_field(stringify!(#field_names), &self.#field_names) {","highlight_start":1,"highlight_end":104},{"text":"                        return Err(e);","highlight_start":1,"highlight_end":39},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                )*","highlight_start":1,"highlight_end":19},{"text":"                Ok(())","highlight_start":1,"highlight_end":23},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            /// Load configuration from a YAML file","highlight_start":1,"highlight_end":52},{"text":"            pub fn from_file(path: &str) -> Result<Self, ConfigError> {","highlight_start":1,"highlight_end":72},{"text":"                let contents = std::fs::read_to_string(path)","highlight_start":1,"highlight_end":61},{"text":"                    .map_err(|e| ConfigError::FileError(format!(\"Failed to read config file: {}\", e)))?;","highlight_start":1,"highlight_end":105},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                serde_yaml::from_str(&contents)","highlight_start":1,"highlight_end":48},{"text":"                    .map_err(|e| ConfigError::ParseError(format!(\"Failed to parse config file: {}\", e)))","highlight_start":1,"highlight_end":105},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            /// Load configuration from multiple sources in order of priority:","highlight_start":1,"highlight_end":79},{"text":"            /// 1. Load from file (base configuration)","highlight_start":1,"highlight_end":55},{"text":"            /// 2. Override with environment variables (higher priority)","highlight_start":1,"highlight_end":73},{"text":"            pub fn from_sources(file_path: &str) -> Result<Self, ConfigError> {","highlight_start":1,"highlight_end":80},{"text":"                // First load from file","highlight_start":1,"highlight_end":40},{"text":"                let mut config = match Self::from_file(file_path) {","highlight_start":1,"highlight_end":68},{"text":"                    Ok(cfg) => cfg,","highlight_start":1,"highlight_end":36},{"text":"                    Err(e) => {","highlight_start":1,"highlight_end":32},{"text":"                        log::warn!(\"Failed to load config from file: {}, using defaults\", e);","highlight_start":1,"highlight_end":94},{"text":"                        Self::default()","highlight_start":1,"highlight_end":40},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                // Then override with environment variables","highlight_start":1,"highlight_end":60},{"text":"                if let Err(e) = config.load_env() {","highlight_start":1,"highlight_end":52},{"text":"                    log::warn!(\"Failed to load config from environment: {}\", e);","highlight_start":1,"highlight_end":81},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                // Validate the final configuration","highlight_start":1,"highlight_end":52},{"text":"                config.validate()?;","highlight_start":1,"highlight_end":36},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                Ok(config)","highlight_start":1,"highlight_end":27},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            /// Merge with another configuration","highlight_start":1,"highlight_end":49},{"text":"            pub fn merge(&mut self, other: Self) {","highlight_start":1,"highlight_end":51},{"text":"                #(","highlight_start":1,"highlight_end":19},{"text":"                    self.#field_names = other.#field_names;","highlight_start":1,"highlight_end":60},{"text":"                )*","highlight_start":1,"highlight_end":19},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            /// Parse a string into a value of type T","highlight_start":1,"highlight_end":54},{"text":"            fn parse_value<T: FromStr>(value: &str) -> Result<T, ConfigError>","highlight_start":1,"highlight_end":78},{"text":"            where","highlight_start":1,"highlight_end":18},{"text":"                T::Err: std::fmt::Display,","highlight_start":1,"highlight_end":43},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                value.parse()","highlight_start":1,"highlight_end":30},{"text":"                    .map_err(|e| ConfigError::ParseError(format!(\"Failed to parse value '{}': {}\", value, e)))","highlight_start":1,"highlight_end":111},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            /// Parse a comma-separated string into a Vec<T>","highlight_start":1,"highlight_end":61},{"text":"            fn parse_array<T: FromStr>(value: &str) -> Result<Vec<T>, ConfigError>","highlight_start":1,"highlight_end":83},{"text":"            where","highlight_start":1,"highlight_end":18},{"text":"                T::Err: std::fmt::Display,","highlight_start":1,"highlight_end":43},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                value.split(',')","highlight_start":1,"highlight_end":33},{"text":"                    .map(|s| s.trim())","highlight_start":1,"highlight_end":39},{"text":"                    .filter(|s| !s.is_empty())","highlight_start":1,"highlight_end":47},{"text":"                    .map(|s| Self::parse_value::<T>(s))","highlight_start":1,"highlight_end":56},{"text":"                    .collect()","highlight_start":1,"highlight_end":31},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            /// Check if a type is Option<T>","highlight_start":1,"highlight_end":45},{"text":"            fn is_option_type(type_str: &str) -> bool {","highlight_start":1,"highlight_end":56},{"text":"                type_str.starts_with(\"Option < \")","highlight_start":1,"highlight_end":50},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            /// Extract inner type from Option<T>","highlight_start":1,"highlight_end":50},{"text":"            fn get_inner_type(type_str: &str) -> &str {","highlight_start":1,"highlight_end":56},{"text":"                if type_str.starts_with(\"Option < \") {","highlight_start":1,"highlight_end":55},{"text":"                    let start = \"Option < \".len();","highlight_start":1,"highlight_end":51},{"text":"                    let end = type_str.len() - 2; // Remove trailing \" >\"","highlight_start":1,"highlight_end":74},{"text":"                    &type_str[start..end]","highlight_start":1,"highlight_end":42},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    type_str","highlight_start":1,"highlight_end":29},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            /// Parse a string into an Option<T>","highlight_start":1,"highlight_end":49},{"text":"            fn parse_option<T: FromStr>(value: &str) -> Result<Option<T>, ConfigError>","highlight_start":1,"highlight_end":87},{"text":"            where","highlight_start":1,"highlight_end":18},{"text":"                T::Err: std::fmt::Display,","highlight_start":1,"highlight_end":43},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                if value.trim().is_empty() {","highlight_start":1,"highlight_end":45},{"text":"                    Ok(None)","highlight_start":1,"highlight_end":29},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    Ok(Some(Self::parse_value(value)?))","highlight_start":1,"highlight_end":56},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            /// Parse a string into a value based on its type","highlight_start":1,"highlight_end":62},{"text":"            fn parse_type(type_str: &str, value: &str) -> Result<Box<dyn std::any::Any>, ConfigError> {","highlight_start":1,"highlight_end":104},{"text":"                let inner_type = Self::get_inner_type(type_str);","highlight_start":1,"highlight_end":65},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                let result: Box<dyn std::any::Any> = match inner_type {","highlight_start":1,"highlight_end":72},{"text":"                    \"String\" => if Self::is_option_type(type_str) {","highlight_start":1,"highlight_end":68},{"text":"                        Box::new(Self::parse_option::<String>(value)?)","highlight_start":1,"highlight_end":71},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Box::new(Self::parse_value::<String>(value)?)","highlight_start":1,"highlight_end":70},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"i32\" => if Self::is_option_type(type_str) {","highlight_start":1,"highlight_end":65},{"text":"                        Box::new(Self::parse_option::<i32>(value)?)","highlight_start":1,"highlight_end":68},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Box::new(Self::parse_value::<i32>(value)?)","highlight_start":1,"highlight_end":67},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"i64\" => if Self::is_option_type(type_str) {","highlight_start":1,"highlight_end":65},{"text":"                        Box::new(Self::parse_option::<i64>(value)?)","highlight_start":1,"highlight_end":68},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Box::new(Self::parse_value::<i64>(value)?)","highlight_start":1,"highlight_end":67},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"u32\" => if Self::is_option_type(type_str) {","highlight_start":1,"highlight_end":65},{"text":"                        Box::new(Self::parse_option::<u32>(value)?)","highlight_start":1,"highlight_end":68},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Box::new(Self::parse_value::<u32>(value)?)","highlight_start":1,"highlight_end":67},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"u64\" => if Self::is_option_type(type_str) {","highlight_start":1,"highlight_end":65},{"text":"                        Box::new(Self::parse_option::<u64>(value)?)","highlight_start":1,"highlight_end":68},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Box::new(Self::parse_value::<u64>(value)?)","highlight_start":1,"highlight_end":67},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"f32\" => if Self::is_option_type(type_str) {","highlight_start":1,"highlight_end":65},{"text":"                        Box::new(Self::parse_option::<f32>(value)?)","highlight_start":1,"highlight_end":68},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Box::new(Self::parse_value::<f32>(value)?)","highlight_start":1,"highlight_end":67},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"f64\" => if Self::is_option_type(type_str) {","highlight_start":1,"highlight_end":65},{"text":"                        Box::new(Self::parse_option::<f64>(value)?)","highlight_start":1,"highlight_end":68},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Box::new(Self::parse_value::<f64>(value)?)","highlight_start":1,"highlight_end":67},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"bool\" => if Self::is_option_type(type_str) {","highlight_start":1,"highlight_end":66},{"text":"                        Box::new(Self::parse_option::<bool>(value)?)","highlight_start":1,"highlight_end":69},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Box::new(Self::parse_value::<bool>(value)?)","highlight_start":1,"highlight_end":68},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    _ => if type_str.starts_with(\"Vec < \") {","highlight_start":1,"highlight_end":61},{"text":"                        // Handle array types","highlight_start":1,"highlight_end":46},{"text":"                        let element_type = type_str.trim_start_matches(\"Vec < \").trim_end_matches(\" >\");","highlight_start":1,"highlight_end":105},{"text":"                        match element_type {","highlight_start":1,"highlight_end":45},{"text":"                            \"String\" => Box::new(Self::parse_array::<String>(value)?),","highlight_start":1,"highlight_end":87},{"text":"                            \"i32\" => Box::new(Self::parse_array::<i32>(value)?),","highlight_start":1,"highlight_end":81},{"text":"                            \"i64\" => Box::new(Self::parse_array::<i64>(value)?),","highlight_start":1,"highlight_end":81},{"text":"                            \"u32\" => Box::new(Self::parse_array::<u32>(value)?),","highlight_start":1,"highlight_end":81},{"text":"                            \"u64\" => Box::new(Self::parse_array::<u64>(value)?),","highlight_start":1,"highlight_end":81},{"text":"                            \"f32\" => Box::new(Self::parse_array::<f32>(value)?),","highlight_start":1,"highlight_end":81},{"text":"                            \"f64\" => Box::new(Self::parse_array::<f64>(value)?),","highlight_start":1,"highlight_end":81},{"text":"                            \"bool\" => Box::new(Self::parse_array::<bool>(value)?),","highlight_start":1,"highlight_end":83},{"text":"                            _ => return Err(ConfigError::ParseError(","highlight_start":1,"highlight_end":69},{"text":"                                format!(\"Unsupported array element type: {}\", element_type)","highlight_start":1,"highlight_end":92},{"text":"                            )),","highlight_start":1,"highlight_end":32},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        return Err(ConfigError::ParseError(","highlight_start":1,"highlight_end":60},{"text":"                            format!(\"Unsupported type: {}\", type_str)","highlight_start":1,"highlight_end":70},{"text":"                        ));","highlight_start":1,"highlight_end":28},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                Ok(result)","highlight_start":1,"highlight_end":27},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            /// Load configuration from environment variables, overriding existing values","highlight_start":1,"highlight_end":90},{"text":"            pub fn load_env(&mut self) -> Result<(), ConfigError> {","highlight_start":1,"highlight_end":68},{"text":"                #(","highlight_start":1,"highlight_end":19},{"text":"                    if let Ok(value) = std::env::var(#field_env_names) {","highlight_start":1,"highlight_end":73},{"text":"                        let field_type = stringify!(#field_types);","highlight_start":1,"highlight_end":67},{"text":"                        let parsed_value = Self::parse_type(field_type, &value)?;","highlight_start":1,"highlight_end":82},{"text":"                        ","highlight_start":1,"highlight_end":25},{"text":"                        // Downcast to the correct type","highlight_start":1,"highlight_end":56},{"text":"                        if let Some(v) = parsed_value.downcast_ref() {","highlight_start":1,"highlight_end":71},{"text":"                            self.#field_names = v.clone();","highlight_start":1,"highlight_end":59},{"text":"                        } else {","highlight_start":1,"highlight_end":33},{"text":"                            return Err(ConfigError::ParseError(","highlight_start":1,"highlight_end":64},{"text":"                                format!(\"Type mismatch for field {}\", stringify!(#field_names))","highlight_start":1,"highlight_end":96},{"text":"                            ));","highlight_start":1,"highlight_end":32},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    } else if Self::is_option_type(stringify!(#field_types)) {","highlight_start":1,"highlight_end":79},{"text":"                        // For Option types, set to None if environment variable is not present","highlight_start":1,"highlight_end":96},{"text":"                        self.#field_names = None;","highlight_start":1,"highlight_end":50},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                )*","highlight_start":1,"highlight_end":19},{"text":"                Ok(())","highlight_start":1,"highlight_end":23},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            /// Create a new builder","highlight_start":1,"highlight_end":37},{"text":"            pub fn builder() -> #name Builder {","highlight_start":1,"highlight_end":48},{"text":"                #name Builder::default()","highlight_start":1,"highlight_end":41},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // Private validation helper","highlight_start":1,"highlight_end":41},{"text":"            fn validate_field<T>(&self, field_name: &str, value: &T) -> Result<(), ConfigError> {","highlight_start":1,"highlight_end":98},{"text":"                // Add field-specific validation based on attributes","highlight_start":1,"highlight_end":69},{"text":"                #(","highlight_start":1,"highlight_end":19},{"text":"                    if field_name == stringify!(#field_names) {","highlight_start":1,"highlight_end":64},{"text":"                        for attr in #field_attrs {","highlight_start":1,"highlight_end":51},{"text":"                            if attr.path().is_ident(\"config\") {","highlight_start":1,"highlight_end":64},{"text":"                                if let Ok(meta) = attr.parse_nested_meta(|meta| {","highlight_start":1,"highlight_end":82},{"text":"                                    if meta.path.is_ident(\"validate\") {","highlight_start":1,"highlight_end":72},{"text":"                                        // Parse validation rules","highlight_start":1,"highlight_end":66},{"text":"                                        meta.parse_nested_meta(|nested| {","highlight_start":1,"highlight_end":74},{"text":"                                            if nested.path.is_ident(\"range\") {","highlight_start":1,"highlight_end":79},{"text":"                                                // Handle range validation","highlight_start":1,"highlight_end":75},{"text":"                                                let min = nested.value()?.parse_nested_meta(|m| {","highlight_start":1,"highlight_end":98},{"text":"                                                    if m.path.is_ident(\"min\") {","highlight_start":1,"highlight_end":80},{"text":"                                                        Ok(m.value()?.parse()?)","highlight_start":1,"highlight_end":80},{"text":"                                                    } else {","highlight_start":1,"highlight_end":61},{"text":"                                                        Ok(std::u64::MIN)","highlight_start":1,"highlight_end":74},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                })?;","highlight_start":1,"highlight_end":53},{"text":"                                                let max = nested.value()?.parse_nested_meta(|m| {","highlight_start":1,"highlight_end":98},{"text":"                                                    if m.path.is_ident(\"max\") {","highlight_start":1,"highlight_end":80},{"text":"                                                        Ok(m.value()?.parse()?)","highlight_start":1,"highlight_end":80},{"text":"                                                    } else {","highlight_start":1,"highlight_end":61},{"text":"                                                        Ok(std::u64::MAX)","highlight_start":1,"highlight_end":74},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                })?;","highlight_start":1,"highlight_end":53},{"text":"                                                ","highlight_start":1,"highlight_end":49},{"text":"                                                // Perform range validation","highlight_start":1,"highlight_end":76},{"text":"                                                let value = value.to_string().parse::<u64>()","highlight_start":1,"highlight_end":93},{"text":"                                                    .map_err(|_| ConfigError::ValidationError(","highlight_start":1,"highlight_end":95},{"text":"                                                        format!(\"Invalid value for {}\", field_name)","highlight_start":1,"highlight_end":100},{"text":"                                                    ))?;","highlight_start":1,"highlight_end":57},{"text":"                                                if value < min || value > max {","highlight_start":1,"highlight_end":80},{"text":"                                                    return Err(ConfigError::ValidationError(","highlight_start":1,"highlight_end":93},{"text":"                                                        format!(\"{} must be between {} and {}\", field_name, min, max)","highlight_start":1,"highlight_end":118},{"text":"                                                    ));","highlight_start":1,"highlight_end":56},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                            }","highlight_start":1,"highlight_end":46},{"text":"                                            Ok(())","highlight_start":1,"highlight_end":51},{"text":"                                        })?;","highlight_start":1,"highlight_end":45},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                    Ok(())","highlight_start":1,"highlight_end":43},{"text":"                                }) {","highlight_start":1,"highlight_end":37},{"text":"                                    if let Err(e) = meta {","highlight_start":1,"highlight_end":59},{"text":"                                        return Err(ConfigError::ValidationError(e.to_string()));","highlight_start":1,"highlight_end":97},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                )*","highlight_start":1,"highlight_end":19},{"text":"                Ok(())","highlight_start":1,"highlight_end":23},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            /// Convert configuration to a different type","highlight_start":1,"highlight_end":58},{"text":"            pub fn convert<T: TryFrom<Self>>(&self) -> Result<T, ConfigError> {","highlight_start":1,"highlight_end":80},{"text":"                T::try_from(self.clone())","highlight_start":1,"highlight_end":42},{"text":"                    .map_err(|_| ConfigError::ConversionError(","highlight_start":1,"highlight_end":63},{"text":"                        format!(\"Failed to convert {} to target type\", stringify!(#name))","highlight_start":1,"highlight_end":90},{"text":"                    ))","highlight_start":1,"highlight_end":23},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        /// Builder for #name","highlight_start":1,"highlight_end":30},{"text":"        #[derive(Default)]","highlight_start":1,"highlight_end":27},{"text":"        pub struct #name Builder {","highlight_start":1,"highlight_end":35},{"text":"            #(","highlight_start":1,"highlight_end":15},{"text":"                #field_names: #builder_field_types,","highlight_start":1,"highlight_end":52},{"text":"            )*","highlight_start":1,"highlight_end":15},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl #name Builder {","highlight_start":1,"highlight_end":29},{"text":"            #(","highlight_start":1,"highlight_end":15},{"text":"                pub fn #field_names(mut self, value: #field_types) -> Self {","highlight_start":1,"highlight_end":77},{"text":"                    self.#field_names = Some(value);","highlight_start":1,"highlight_end":53},{"text":"                    self","highlight_start":1,"highlight_end":25},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            )*","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            pub fn build(self) -> Result<#name, ConfigError> {","highlight_start":1,"highlight_end":63},{"text":"                Ok(#name {","highlight_start":1,"highlight_end":27},{"text":"                    #(","highlight_start":1,"highlight_end":23},{"text":"                        #field_names: self.#field_names.ok_or_else(|| {","highlight_start":1,"highlight_end":72},{"text":"                            ConfigError::BuildError(format!(\"Missing required field: {}\", stringify!(#field_names)))","highlight_start":1,"highlight_end":117},{"text":"                        })?,","highlight_start":1,"highlight_end":29},{"text":"                    )*","highlight_start":1,"highlight_end":23},{"text":"                })","highlight_start":1,"highlight_end":19},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl Default for #name {","highlight_start":1,"highlight_end":33},{"text":"            fn default() -> Self {","highlight_start":1,"highlight_end":35},{"text":"                Self {","highlight_start":1,"highlight_end":23},{"text":"                    #(","highlight_start":1,"highlight_end":23},{"text":"                        #field_names: {","highlight_start":1,"highlight_end":40},{"text":"                            let mut default_value = None;","highlight_start":1,"highlight_end":58},{"text":"                            for attr in #field_attrs {","highlight_start":1,"highlight_end":55},{"text":"                                if attr.path().is_ident(\"config\") {","highlight_start":1,"highlight_end":68},{"text":"                                    if let Ok(meta) = attr.parse_nested_meta(|meta| {","highlight_start":1,"highlight_end":86},{"text":"                                        if meta.path.is_ident(\"default\") {","highlight_start":1,"highlight_end":75},{"text":"                                            default_value = Some(meta.value()?.parse()?);","highlight_start":1,"highlight_end":90},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                        Ok(())","highlight_start":1,"highlight_end":47},{"text":"                                    }) {","highlight_start":1,"highlight_end":41},{"text":"                                        if let Some(value) = default_value {","highlight_start":1,"highlight_end":77},{"text":"                                            return value;","highlight_start":1,"highlight_end":58},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            Default::default()","highlight_start":1,"highlight_end":47},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                    )*","highlight_start":1,"highlight_end":23},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[async_trait::async_trait]","highlight_start":1,"highlight_end":36},{"text":"        impl ConfigReload for #name {","highlight_start":1,"highlight_end":38},{"text":"            async fn reload(&mut self) -> Result<(), ConfigError> {","highlight_start":1,"highlight_end":68},{"text":"                // Try loading from file first","highlight_start":1,"highlight_end":47},{"text":"                if let Ok(new_config) = Self::from_file(\"config.yml\") {","highlight_start":1,"highlight_end":72},{"text":"                    *self = new_config;","highlight_start":1,"highlight_end":40},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                // Then override with environment variables","highlight_start":1,"highlight_end":60},{"text":"                self.load_env()?;","highlight_start":1,"highlight_end":34},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                // Validate after reload","highlight_start":1,"highlight_end":41},{"text":"                self.validate()?;","highlight_start":1,"highlight_end":34},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                Ok(())","highlight_start":1,"highlight_end":23},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // Implement serialization traits","highlight_start":1,"highlight_end":42},{"text":"        impl serde::Serialize for #name {","highlight_start":1,"highlight_end":42},{"text":"            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>","highlight_start":1,"highlight_end":77},{"text":"            where","highlight_start":1,"highlight_end":18},{"text":"                S: serde::Serializer,","highlight_start":1,"highlight_end":38},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use serde::ser::SerializeStruct;","highlight_start":1,"highlight_end":49},{"text":"                let mut state = serializer.serialize_struct(stringify!(#name), #field_names.len())?;","highlight_start":1,"highlight_end":101},{"text":"                #(","highlight_start":1,"highlight_end":19},{"text":"                    state.serialize_field(stringify!(#field_names), &self.#field_names)?;","highlight_start":1,"highlight_end":90},{"text":"                )*","highlight_start":1,"highlight_end":19},{"text":"                state.end()","highlight_start":1,"highlight_end":28},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<'de> serde::Deserialize<'de> for #name {","highlight_start":1,"highlight_end":54},{"text":"            fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>","highlight_start":1,"highlight_end":73},{"text":"            where","highlight_start":1,"highlight_end":18},{"text":"                D: serde::Deserializer<'de>,","highlight_start":1,"highlight_end":45},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use serde::de::{self, Visitor};","highlight_start":1,"highlight_end":48},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                struct ConfigVisitor;","highlight_start":1,"highlight_end":38},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                impl<'de> Visitor<'de> for ConfigVisitor {","highlight_start":1,"highlight_end":59},{"text":"                    type Value = #name;","highlight_start":1,"highlight_end":40},{"text":"                    ","highlight_start":1,"highlight_end":21},{"text":"                    fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {","highlight_start":1,"highlight_end":99},{"text":"                        formatter.write_str(concat!(\"struct \", stringify!(#name)))","highlight_start":1,"highlight_end":83},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    ","highlight_start":1,"highlight_end":21},{"text":"                    fn visit_map<V>(self, mut map: V) -> Result<#name, V::Error>","highlight_start":1,"highlight_end":81},{"text":"                    where","highlight_start":1,"highlight_end":26},{"text":"                        V: de::MapAccess<'de>,","highlight_start":1,"highlight_end":47},{"text":"                    {","highlight_start":1,"highlight_end":22},{"text":"                        let mut config = #name::default();","highlight_start":1,"highlight_end":59},{"text":"                        while let Some(key) = map.next_key()? {","highlight_start":1,"highlight_end":64},{"text":"                            match key {","highlight_start":1,"highlight_end":40},{"text":"                                #(","highlight_start":1,"highlight_end":35},{"text":"                                    stringify!(#field_names) => {","highlight_start":1,"highlight_end":66},{"text":"                                        config.#field_names = map.next_value()?;","highlight_start":1,"highlight_end":81},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                )*","highlight_start":1,"highlight_end":35},{"text":"                                _ => {","highlight_start":1,"highlight_end":39},{"text":"                                    let _ = map.next_value::<de::IgnoredAny>()?;","highlight_start":1,"highlight_end":81},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Ok(config)","highlight_start":1,"highlight_end":35},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                deserializer.deserialize_map(ConfigVisitor)","highlight_start":1,"highlight_end":60},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"quote!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":17600,"byte_end":17618,"line_start":500,"line_end":500,"column_start":5,"column_end":23,"is_primary":false,"text":[{"text":"    macro_rules! quote {","highlight_start":5,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_each_token!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":29528,"byte_end":29557,"line_start":829,"line_end":829,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"macro_rules! quote_each_token {","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_tokens_with_context!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":30486,"byte_end":30524,"line_start":863,"line_end":863,"column_start":1,"column_end":39,"is_primary":false,"text":[{"text":"macro_rules! quote_tokens_with_context {","highlight_start":1,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_token_with_context!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":31280,"byte_end":31317,"line_start":893,"line_end":893,"column_start":1,"column_end":38,"is_primary":false,"text":[{"text":"macro_rules! quote_token_with_context {","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_token!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":37501,"byte_end":37525,"line_start":1024,"line_end":1024,"column_start":1,"column_end":25,"is_primary":false,"text":[{"text":"macro_rules! quote_token {","highlight_start":1,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":17600,"byte_end":17618,"line_start":500,"line_end":500,"column_start":5,"column_end":23,"is_primary":false,"text":[{"text":"    macro_rules! quote {","highlight_start":5,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_each_token!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":29528,"byte_end":29557,"line_start":829,"line_end":829,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"macro_rules! quote_each_token {","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_tokens_with_context!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":30486,"byte_end":30524,"line_start":863,"line_end":863,"column_start":1,"column_end":39,"is_primary":false,"text":[{"text":"macro_rules! quote_tokens_with_context {","highlight_start":1,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_token_with_context!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":31280,"byte_end":31317,"line_start":893,"line_end":893,"column_start":1,"column_end":38,"is_primary":false,"text":[{"text":"macro_rules! quote_token_with_context {","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_token!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":37501,"byte_end":37525,"line_start":1024,"line_end":1024,"column_start":1,"column_end":25,"is_primary":false,"text":[{"text":"macro_rules! quote_token {","highlight_start":1,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":17600,"byte_end":17618,"line_start":500,"line_end":500,"column_start":5,"column_end":23,"is_primary":false,"text":[{"text":"    macro_rules! quote {","highlight_start":5,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_each_token!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":29528,"byte_end":29557,"line_start":829,"line_end":829,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"macro_rules! quote_each_token {","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_tokens_with_context!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":30486,"byte_end":30524,"line_start":863,"line_end":863,"column_start":1,"column_end":39,"is_primary":false,"text":[{"text":"macro_rules! quote_tokens_with_context {","highlight_start":1,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_token_with_context!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":31280,"byte_end":31317,"line_start":893,"line_end":893,"column_start":1,"column_end":38,"is_primary":false,"text":[{"text":"macro_rules! quote_token_with_context {","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_each_token!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":29528,"byte_end":29557,"line_start":829,"line_end":829,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"macro_rules! quote_each_token {","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_tokens_with_context!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":30486,"byte_end":30524,"line_start":863,"line_end":863,"column_start":1,"column_end":39,"is_primary":false,"text":[{"text":"macro_rules! quote_tokens_with_context {","highlight_start":1,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_token_with_context!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":31280,"byte_end":31317,"line_start":893,"line_end":893,"column_start":1,"column_end":38,"is_primary":false,"text":[{"text":"macro_rules! quote_token_with_context {","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_token!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":37501,"byte_end":37525,"line_start":1024,"line_end":1024,"column_start":1,"column_end":25,"is_primary":false,"text":[{"text":"macro_rules! quote_token {","highlight_start":1,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":17600,"byte_end":17618,"line_start":500,"line_end":500,"column_start":5,"column_end":23,"is_primary":false,"text":[{"text":"    macro_rules! quote {","highlight_start":5,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_each_token!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":29528,"byte_end":29557,"line_start":829,"line_end":829,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"macro_rules! quote_each_token {","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_tokens_with_context!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":30486,"byte_end":30524,"line_start":863,"line_end":863,"column_start":1,"column_end":39,"is_primary":false,"text":[{"text":"macro_rules! quote_tokens_with_context {","highlight_start":1,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_token_with_context!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":31280,"byte_end":31317,"line_start":893,"line_end":893,"column_start":1,"column_end":38,"is_primary":false,"text":[{"text":"macro_rules! quote_token_with_context {","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":34180,"byte_end":34207,"line_start":951,"line_end":951,"column_start":9,"column_end":36,"is_primary":false,"text":[{"text":"        $crate::ToTokens::to_tokens(&$var, &mut $tokens);","highlight_start":9,"highlight_end":36}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":30697,"byte_end":30769,"line_start":870,"line_end":870,"column_start":13,"column_end":85,"is_primary":false,"text":[{"text":"            $crate::quote_token_with_context!{$tokens $b3 $b2 $b1 $curr $a1 $a2 $a3}","highlight_start":13,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":29605,"byte_end":29904,"line_start":831,"line_end":839,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        $crate::quote_tokens_with_context!{$tokens","highlight_start":9,"highlight_end":51},{"text":"            (@ @ @ @ @ @ $($tts)*)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ @ $($tts)* @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ $($tts)* @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ $(($tts))* @ @ @)","highlight_start":1,"highlight_end":37},{"text":"            (@ @ $($tts)* @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ $($tts)* @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            ($($tts)* @ @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":18514,"byte_end":18551,"line_start":528,"line_end":528,"column_start":13,"column_end":50,"is_primary":false,"text":[{"text":"            $crate::quote_each_token!{_s $($tt)*}","highlight_start":13,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":38346,"byte_end":38372,"line_start":1053,"line_end":1053,"column_start":13,"column_end":39,"is_primary":false,"text":[{"text":"            $crate::quote!($($inner)*),","highlight_start":13,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":34489,"byte_end":34524,"line_start":958,"line_end":958,"column_start":9,"column_end":44,"is_primary":false,"text":[{"text":"        $crate::quote_token!{$curr $tokens}","highlight_start":9,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":30697,"byte_end":30769,"line_start":870,"line_end":870,"column_start":13,"column_end":85,"is_primary":false,"text":[{"text":"            $crate::quote_token_with_context!{$tokens $b3 $b2 $b1 $curr $a1 $a2 $a3}","highlight_start":13,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":29605,"byte_end":29904,"line_start":831,"line_end":839,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        $crate::quote_tokens_with_context!{$tokens","highlight_start":9,"highlight_end":51},{"text":"            (@ @ @ @ @ @ $($tts)*)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ @ $($tts)* @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ $($tts)* @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ $(($tts))* @ @ @)","highlight_start":1,"highlight_end":37},{"text":"            (@ @ $($tts)* @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ $($tts)* @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            ($($tts)* @ @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":32425,"byte_end":32470,"line_start":912,"line_end":912,"column_start":13,"column_end":58,"is_primary":false,"text":[{"text":"            $crate::quote_each_token!{$tokens $($inner)*}","highlight_start":13,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":30697,"byte_end":30769,"line_start":870,"line_end":870,"column_start":13,"column_end":85,"is_primary":false,"text":[{"text":"            $crate::quote_token_with_context!{$tokens $b3 $b2 $b1 $curr $a1 $a2 $a3}","highlight_start":13,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":29605,"byte_end":29904,"line_start":831,"line_end":839,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        $crate::quote_tokens_with_context!{$tokens","highlight_start":9,"highlight_end":51},{"text":"            (@ @ @ @ @ @ $($tts)*)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ @ $($tts)* @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ $($tts)* @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ $(($tts))* @ @ @)","highlight_start":1,"highlight_end":37},{"text":"            (@ @ $($tts)* @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ $($tts)* @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            ($($tts)* @ @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":18514,"byte_end":18551,"line_start":528,"line_end":528,"column_start":13,"column_end":50,"is_primary":false,"text":[{"text":"            $crate::quote_each_token!{_s $($tt)*}","highlight_start":13,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":38346,"byte_end":38372,"line_start":1053,"line_end":1053,"column_start":13,"column_end":39,"is_primary":false,"text":[{"text":"            $crate::quote!($($inner)*),","highlight_start":13,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":34489,"byte_end":34524,"line_start":958,"line_end":958,"column_start":9,"column_end":44,"is_primary":false,"text":[{"text":"        $crate::quote_token!{$curr $tokens}","highlight_start":9,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":30697,"byte_end":30769,"line_start":870,"line_end":870,"column_start":13,"column_end":85,"is_primary":false,"text":[{"text":"            $crate::quote_token_with_context!{$tokens $b3 $b2 $b1 $curr $a1 $a2 $a3}","highlight_start":13,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":29605,"byte_end":29904,"line_start":831,"line_end":839,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        $crate::quote_tokens_with_context!{$tokens","highlight_start":9,"highlight_end":51},{"text":"            (@ @ @ @ @ @ $($tts)*)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ @ $($tts)* @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ $($tts)* @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ $(($tts))* @ @ @)","highlight_start":1,"highlight_end":37},{"text":"            (@ @ $($tts)* @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ $($tts)* @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            ($($tts)* @ @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":18514,"byte_end":18551,"line_start":528,"line_end":528,"column_start":13,"column_end":50,"is_primary":false,"text":[{"text":"            $crate::quote_each_token!{_s $($tt)*}","highlight_start":13,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":38346,"byte_end":38372,"line_start":1053,"line_end":1053,"column_start":13,"column_end":39,"is_primary":false,"text":[{"text":"            $crate::quote!($($inner)*),","highlight_start":13,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":34489,"byte_end":34524,"line_start":958,"line_end":958,"column_start":9,"column_end":44,"is_primary":false,"text":[{"text":"        $crate::quote_token!{$curr $tokens}","highlight_start":9,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":30697,"byte_end":30769,"line_start":870,"line_end":870,"column_start":13,"column_end":85,"is_primary":false,"text":[{"text":"            $crate::quote_token_with_context!{$tokens $b3 $b2 $b1 $curr $a1 $a2 $a3}","highlight_start":13,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":29605,"byte_end":29904,"line_start":831,"line_end":839,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        $crate::quote_tokens_with_context!{$tokens","highlight_start":9,"highlight_end":51},{"text":"            (@ @ @ @ @ @ $($tts)*)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ @ $($tts)* @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ $($tts)* @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ $(($tts))* @ @ @)","highlight_start":1,"highlight_end":37},{"text":"            (@ @ $($tts)* @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ $($tts)* @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            ($($tts)* @ @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":18514,"byte_end":18551,"line_start":528,"line_end":528,"column_start":13,"column_end":50,"is_primary":false,"text":[{"text":"            $crate::quote_each_token!{_s $($tt)*}","highlight_start":13,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"crates\\genies_derive\\src\\lib.rs","byte_start":2221,"byte_end":19604,"line_start":70,"line_end":461,"column_start":20,"column_end":6,"is_primary":false,"text":[{"text":"    let expanded = quote! {","highlight_start":20,"highlight_end":28},{"text":"        impl #name {","highlight_start":1,"highlight_end":21},{"text":"            /// Validate the configuration","highlight_start":1,"highlight_end":43},{"text":"            pub fn validate(&self) -> Result<(), ConfigError> {","highlight_start":1,"highlight_end":64},{"text":"                #(","highlight_start":1,"highlight_end":19},{"text":"                    if let Err(e) = self.validate_field(stringify!(#field_names), &self.#field_names) {","highlight_start":1,"highlight_end":104},{"text":"                        return Err(e);","highlight_start":1,"highlight_end":39},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                )*","highlight_start":1,"highlight_end":19},{"text":"                Ok(())","highlight_start":1,"highlight_end":23},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            /// Load configuration from a YAML file","highlight_start":1,"highlight_end":52},{"text":"            pub fn from_file(path: &str) -> Result<Self, ConfigError> {","highlight_start":1,"highlight_end":72},{"text":"                let contents = std::fs::read_to_string(path)","highlight_start":1,"highlight_end":61},{"text":"                    .map_err(|e| ConfigError::FileError(format!(\"Failed to read config file: {}\", e)))?;","highlight_start":1,"highlight_end":105},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                serde_yaml::from_str(&contents)","highlight_start":1,"highlight_end":48},{"text":"                    .map_err(|e| ConfigError::ParseError(format!(\"Failed to parse config file: {}\", e)))","highlight_start":1,"highlight_end":105},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            /// Load configuration from multiple sources in order of priority:","highlight_start":1,"highlight_end":79},{"text":"            /// 1. Load from file (base configuration)","highlight_start":1,"highlight_end":55},{"text":"            /// 2. Override with environment variables (higher priority)","highlight_start":1,"highlight_end":73},{"text":"            pub fn from_sources(file_path: &str) -> Result<Self, ConfigError> {","highlight_start":1,"highlight_end":80},{"text":"                // First load from file","highlight_start":1,"highlight_end":40},{"text":"                let mut config = match Self::from_file(file_path) {","highlight_start":1,"highlight_end":68},{"text":"                    Ok(cfg) => cfg,","highlight_start":1,"highlight_end":36},{"text":"                    Err(e) => {","highlight_start":1,"highlight_end":32},{"text":"                        log::warn!(\"Failed to load config from file: {}, using defaults\", e);","highlight_start":1,"highlight_end":94},{"text":"                        Self::default()","highlight_start":1,"highlight_end":40},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                // Then override with environment variables","highlight_start":1,"highlight_end":60},{"text":"                if let Err(e) = config.load_env() {","highlight_start":1,"highlight_end":52},{"text":"                    log::warn!(\"Failed to load config from environment: {}\", e);","highlight_start":1,"highlight_end":81},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                // Validate the final configuration","highlight_start":1,"highlight_end":52},{"text":"                config.validate()?;","highlight_start":1,"highlight_end":36},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                Ok(config)","highlight_start":1,"highlight_end":27},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            /// Merge with another configuration","highlight_start":1,"highlight_end":49},{"text":"            pub fn merge(&mut self, other: Self) {","highlight_start":1,"highlight_end":51},{"text":"                #(","highlight_start":1,"highlight_end":19},{"text":"                    self.#field_names = other.#field_names;","highlight_start":1,"highlight_end":60},{"text":"                )*","highlight_start":1,"highlight_end":19},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            /// Parse a string into a value of type T","highlight_start":1,"highlight_end":54},{"text":"            fn parse_value<T: FromStr>(value: &str) -> Result<T, ConfigError>","highlight_start":1,"highlight_end":78},{"text":"            where","highlight_start":1,"highlight_end":18},{"text":"                T::Err: std::fmt::Display,","highlight_start":1,"highlight_end":43},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                value.parse()","highlight_start":1,"highlight_end":30},{"text":"                    .map_err(|e| ConfigError::ParseError(format!(\"Failed to parse value '{}': {}\", value, e)))","highlight_start":1,"highlight_end":111},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            /// Parse a comma-separated string into a Vec<T>","highlight_start":1,"highlight_end":61},{"text":"            fn parse_array<T: FromStr>(value: &str) -> Result<Vec<T>, ConfigError>","highlight_start":1,"highlight_end":83},{"text":"            where","highlight_start":1,"highlight_end":18},{"text":"                T::Err: std::fmt::Display,","highlight_start":1,"highlight_end":43},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                value.split(',')","highlight_start":1,"highlight_end":33},{"text":"                    .map(|s| s.trim())","highlight_start":1,"highlight_end":39},{"text":"                    .filter(|s| !s.is_empty())","highlight_start":1,"highlight_end":47},{"text":"                    .map(|s| Self::parse_value::<T>(s))","highlight_start":1,"highlight_end":56},{"text":"                    .collect()","highlight_start":1,"highlight_end":31},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            /// Check if a type is Option<T>","highlight_start":1,"highlight_end":45},{"text":"            fn is_option_type(type_str: &str) -> bool {","highlight_start":1,"highlight_end":56},{"text":"                type_str.starts_with(\"Option < \")","highlight_start":1,"highlight_end":50},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            /// Extract inner type from Option<T>","highlight_start":1,"highlight_end":50},{"text":"            fn get_inner_type(type_str: &str) -> &str {","highlight_start":1,"highlight_end":56},{"text":"                if type_str.starts_with(\"Option < \") {","highlight_start":1,"highlight_end":55},{"text":"                    let start = \"Option < \".len();","highlight_start":1,"highlight_end":51},{"text":"                    let end = type_str.len() - 2; // Remove trailing \" >\"","highlight_start":1,"highlight_end":74},{"text":"                    &type_str[start..end]","highlight_start":1,"highlight_end":42},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    type_str","highlight_start":1,"highlight_end":29},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            /// Parse a string into an Option<T>","highlight_start":1,"highlight_end":49},{"text":"            fn parse_option<T: FromStr>(value: &str) -> Result<Option<T>, ConfigError>","highlight_start":1,"highlight_end":87},{"text":"            where","highlight_start":1,"highlight_end":18},{"text":"                T::Err: std::fmt::Display,","highlight_start":1,"highlight_end":43},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                if value.trim().is_empty() {","highlight_start":1,"highlight_end":45},{"text":"                    Ok(None)","highlight_start":1,"highlight_end":29},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    Ok(Some(Self::parse_value(value)?))","highlight_start":1,"highlight_end":56},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            /// Parse a string into a value based on its type","highlight_start":1,"highlight_end":62},{"text":"            fn parse_type(type_str: &str, value: &str) -> Result<Box<dyn std::any::Any>, ConfigError> {","highlight_start":1,"highlight_end":104},{"text":"                let inner_type = Self::get_inner_type(type_str);","highlight_start":1,"highlight_end":65},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                let result: Box<dyn std::any::Any> = match inner_type {","highlight_start":1,"highlight_end":72},{"text":"                    \"String\" => if Self::is_option_type(type_str) {","highlight_start":1,"highlight_end":68},{"text":"                        Box::new(Self::parse_option::<String>(value)?)","highlight_start":1,"highlight_end":71},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Box::new(Self::parse_value::<String>(value)?)","highlight_start":1,"highlight_end":70},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"i32\" => if Self::is_option_type(type_str) {","highlight_start":1,"highlight_end":65},{"text":"                        Box::new(Self::parse_option::<i32>(value)?)","highlight_start":1,"highlight_end":68},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Box::new(Self::parse_value::<i32>(value)?)","highlight_start":1,"highlight_end":67},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"i64\" => if Self::is_option_type(type_str) {","highlight_start":1,"highlight_end":65},{"text":"                        Box::new(Self::parse_option::<i64>(value)?)","highlight_start":1,"highlight_end":68},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Box::new(Self::parse_value::<i64>(value)?)","highlight_start":1,"highlight_end":67},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"u32\" => if Self::is_option_type(type_str) {","highlight_start":1,"highlight_end":65},{"text":"                        Box::new(Self::parse_option::<u32>(value)?)","highlight_start":1,"highlight_end":68},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Box::new(Self::parse_value::<u32>(value)?)","highlight_start":1,"highlight_end":67},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"u64\" => if Self::is_option_type(type_str) {","highlight_start":1,"highlight_end":65},{"text":"                        Box::new(Self::parse_option::<u64>(value)?)","highlight_start":1,"highlight_end":68},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Box::new(Self::parse_value::<u64>(value)?)","highlight_start":1,"highlight_end":67},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"f32\" => if Self::is_option_type(type_str) {","highlight_start":1,"highlight_end":65},{"text":"                        Box::new(Self::parse_option::<f32>(value)?)","highlight_start":1,"highlight_end":68},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Box::new(Self::parse_value::<f32>(value)?)","highlight_start":1,"highlight_end":67},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"f64\" => if Self::is_option_type(type_str) {","highlight_start":1,"highlight_end":65},{"text":"                        Box::new(Self::parse_option::<f64>(value)?)","highlight_start":1,"highlight_end":68},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Box::new(Self::parse_value::<f64>(value)?)","highlight_start":1,"highlight_end":67},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"bool\" => if Self::is_option_type(type_str) {","highlight_start":1,"highlight_end":66},{"text":"                        Box::new(Self::parse_option::<bool>(value)?)","highlight_start":1,"highlight_end":69},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Box::new(Self::parse_value::<bool>(value)?)","highlight_start":1,"highlight_end":68},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    _ => if type_str.starts_with(\"Vec < \") {","highlight_start":1,"highlight_end":61},{"text":"                        // Handle array types","highlight_start":1,"highlight_end":46},{"text":"                        let element_type = type_str.trim_start_matches(\"Vec < \").trim_end_matches(\" >\");","highlight_start":1,"highlight_end":105},{"text":"                        match element_type {","highlight_start":1,"highlight_end":45},{"text":"                            \"String\" => Box::new(Self::parse_array::<String>(value)?),","highlight_start":1,"highlight_end":87},{"text":"                            \"i32\" => Box::new(Self::parse_array::<i32>(value)?),","highlight_start":1,"highlight_end":81},{"text":"                            \"i64\" => Box::new(Self::parse_array::<i64>(value)?),","highlight_start":1,"highlight_end":81},{"text":"                            \"u32\" => Box::new(Self::parse_array::<u32>(value)?),","highlight_start":1,"highlight_end":81},{"text":"                            \"u64\" => Box::new(Self::parse_array::<u64>(value)?),","highlight_start":1,"highlight_end":81},{"text":"                            \"f32\" => Box::new(Self::parse_array::<f32>(value)?),","highlight_start":1,"highlight_end":81},{"text":"                            \"f64\" => Box::new(Self::parse_array::<f64>(value)?),","highlight_start":1,"highlight_end":81},{"text":"                            \"bool\" => Box::new(Self::parse_array::<bool>(value)?),","highlight_start":1,"highlight_end":83},{"text":"                            _ => return Err(ConfigError::ParseError(","highlight_start":1,"highlight_end":69},{"text":"                                format!(\"Unsupported array element type: {}\", element_type)","highlight_start":1,"highlight_end":92},{"text":"                            )),","highlight_start":1,"highlight_end":32},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        return Err(ConfigError::ParseError(","highlight_start":1,"highlight_end":60},{"text":"                            format!(\"Unsupported type: {}\", type_str)","highlight_start":1,"highlight_end":70},{"text":"                        ));","highlight_start":1,"highlight_end":28},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                Ok(result)","highlight_start":1,"highlight_end":27},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            /// Load configuration from environment variables, overriding existing values","highlight_start":1,"highlight_end":90},{"text":"            pub fn load_env(&mut self) -> Result<(), ConfigError> {","highlight_start":1,"highlight_end":68},{"text":"                #(","highlight_start":1,"highlight_end":19},{"text":"                    if let Ok(value) = std::env::var(#field_env_names) {","highlight_start":1,"highlight_end":73},{"text":"                        let field_type = stringify!(#field_types);","highlight_start":1,"highlight_end":67},{"text":"                        let parsed_value = Self::parse_type(field_type, &value)?;","highlight_start":1,"highlight_end":82},{"text":"                        ","highlight_start":1,"highlight_end":25},{"text":"                        // Downcast to the correct type","highlight_start":1,"highlight_end":56},{"text":"                        if let Some(v) = parsed_value.downcast_ref() {","highlight_start":1,"highlight_end":71},{"text":"                            self.#field_names = v.clone();","highlight_start":1,"highlight_end":59},{"text":"                        } else {","highlight_start":1,"highlight_end":33},{"text":"                            return Err(ConfigError::ParseError(","highlight_start":1,"highlight_end":64},{"text":"                                format!(\"Type mismatch for field {}\", stringify!(#field_names))","highlight_start":1,"highlight_end":96},{"text":"                            ));","highlight_start":1,"highlight_end":32},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    } else if Self::is_option_type(stringify!(#field_types)) {","highlight_start":1,"highlight_end":79},{"text":"                        // For Option types, set to None if environment variable is not present","highlight_start":1,"highlight_end":96},{"text":"                        self.#field_names = None;","highlight_start":1,"highlight_end":50},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                )*","highlight_start":1,"highlight_end":19},{"text":"                Ok(())","highlight_start":1,"highlight_end":23},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            /// Create a new builder","highlight_start":1,"highlight_end":37},{"text":"            pub fn builder() -> #name Builder {","highlight_start":1,"highlight_end":48},{"text":"                #name Builder::default()","highlight_start":1,"highlight_end":41},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // Private validation helper","highlight_start":1,"highlight_end":41},{"text":"            fn validate_field<T>(&self, field_name: &str, value: &T) -> Result<(), ConfigError> {","highlight_start":1,"highlight_end":98},{"text":"                // Add field-specific validation based on attributes","highlight_start":1,"highlight_end":69},{"text":"                #(","highlight_start":1,"highlight_end":19},{"text":"                    if field_name == stringify!(#field_names) {","highlight_start":1,"highlight_end":64},{"text":"                        for attr in #field_attrs {","highlight_start":1,"highlight_end":51},{"text":"                            if attr.path().is_ident(\"config\") {","highlight_start":1,"highlight_end":64},{"text":"                                if let Ok(meta) = attr.parse_nested_meta(|meta| {","highlight_start":1,"highlight_end":82},{"text":"                                    if meta.path.is_ident(\"validate\") {","highlight_start":1,"highlight_end":72},{"text":"                                        // Parse validation rules","highlight_start":1,"highlight_end":66},{"text":"                                        meta.parse_nested_meta(|nested| {","highlight_start":1,"highlight_end":74},{"text":"                                            if nested.path.is_ident(\"range\") {","highlight_start":1,"highlight_end":79},{"text":"                                                // Handle range validation","highlight_start":1,"highlight_end":75},{"text":"                                                let min = nested.value()?.parse_nested_meta(|m| {","highlight_start":1,"highlight_end":98},{"text":"                                                    if m.path.is_ident(\"min\") {","highlight_start":1,"highlight_end":80},{"text":"                                                        Ok(m.value()?.parse()?)","highlight_start":1,"highlight_end":80},{"text":"                                                    } else {","highlight_start":1,"highlight_end":61},{"text":"                                                        Ok(std::u64::MIN)","highlight_start":1,"highlight_end":74},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                })?;","highlight_start":1,"highlight_end":53},{"text":"                                                let max = nested.value()?.parse_nested_meta(|m| {","highlight_start":1,"highlight_end":98},{"text":"                                                    if m.path.is_ident(\"max\") {","highlight_start":1,"highlight_end":80},{"text":"                                                        Ok(m.value()?.parse()?)","highlight_start":1,"highlight_end":80},{"text":"                                                    } else {","highlight_start":1,"highlight_end":61},{"text":"                                                        Ok(std::u64::MAX)","highlight_start":1,"highlight_end":74},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                })?;","highlight_start":1,"highlight_end":53},{"text":"                                                ","highlight_start":1,"highlight_end":49},{"text":"                                                // Perform range validation","highlight_start":1,"highlight_end":76},{"text":"                                                let value = value.to_string().parse::<u64>()","highlight_start":1,"highlight_end":93},{"text":"                                                    .map_err(|_| ConfigError::ValidationError(","highlight_start":1,"highlight_end":95},{"text":"                                                        format!(\"Invalid value for {}\", field_name)","highlight_start":1,"highlight_end":100},{"text":"                                                    ))?;","highlight_start":1,"highlight_end":57},{"text":"                                                if value < min || value > max {","highlight_start":1,"highlight_end":80},{"text":"                                                    return Err(ConfigError::ValidationError(","highlight_start":1,"highlight_end":93},{"text":"                                                        format!(\"{} must be between {} and {}\", field_name, min, max)","highlight_start":1,"highlight_end":118},{"text":"                                                    ));","highlight_start":1,"highlight_end":56},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                            }","highlight_start":1,"highlight_end":46},{"text":"                                            Ok(())","highlight_start":1,"highlight_end":51},{"text":"                                        })?;","highlight_start":1,"highlight_end":45},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                    Ok(())","highlight_start":1,"highlight_end":43},{"text":"                                }) {","highlight_start":1,"highlight_end":37},{"text":"                                    if let Err(e) = meta {","highlight_start":1,"highlight_end":59},{"text":"                                        return Err(ConfigError::ValidationError(e.to_string()));","highlight_start":1,"highlight_end":97},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                )*","highlight_start":1,"highlight_end":19},{"text":"                Ok(())","highlight_start":1,"highlight_end":23},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            /// Convert configuration to a different type","highlight_start":1,"highlight_end":58},{"text":"            pub fn convert<T: TryFrom<Self>>(&self) -> Result<T, ConfigError> {","highlight_start":1,"highlight_end":80},{"text":"                T::try_from(self.clone())","highlight_start":1,"highlight_end":42},{"text":"                    .map_err(|_| ConfigError::ConversionError(","highlight_start":1,"highlight_end":63},{"text":"                        format!(\"Failed to convert {} to target type\", stringify!(#name))","highlight_start":1,"highlight_end":90},{"text":"                    ))","highlight_start":1,"highlight_end":23},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        /// Builder for #name","highlight_start":1,"highlight_end":30},{"text":"        #[derive(Default)]","highlight_start":1,"highlight_end":27},{"text":"        pub struct #name Builder {","highlight_start":1,"highlight_end":35},{"text":"            #(","highlight_start":1,"highlight_end":15},{"text":"                #field_names: #builder_field_types,","highlight_start":1,"highlight_end":52},{"text":"            )*","highlight_start":1,"highlight_end":15},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl #name Builder {","highlight_start":1,"highlight_end":29},{"text":"            #(","highlight_start":1,"highlight_end":15},{"text":"                pub fn #field_names(mut self, value: #field_types) -> Self {","highlight_start":1,"highlight_end":77},{"text":"                    self.#field_names = Some(value);","highlight_start":1,"highlight_end":53},{"text":"                    self","highlight_start":1,"highlight_end":25},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            )*","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            pub fn build(self) -> Result<#name, ConfigError> {","highlight_start":1,"highlight_end":63},{"text":"                Ok(#name {","highlight_start":1,"highlight_end":27},{"text":"                    #(","highlight_start":1,"highlight_end":23},{"text":"                        #field_names: self.#field_names.ok_or_else(|| {","highlight_start":1,"highlight_end":72},{"text":"                            ConfigError::BuildError(format!(\"Missing required field: {}\", stringify!(#field_names)))","highlight_start":1,"highlight_end":117},{"text":"                        })?,","highlight_start":1,"highlight_end":29},{"text":"                    )*","highlight_start":1,"highlight_end":23},{"text":"                })","highlight_start":1,"highlight_end":19},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl Default for #name {","highlight_start":1,"highlight_end":33},{"text":"            fn default() -> Self {","highlight_start":1,"highlight_end":35},{"text":"                Self {","highlight_start":1,"highlight_end":23},{"text":"                    #(","highlight_start":1,"highlight_end":23},{"text":"                        #field_names: {","highlight_start":1,"highlight_end":40},{"text":"                            let mut default_value = None;","highlight_start":1,"highlight_end":58},{"text":"                            for attr in #field_attrs {","highlight_start":1,"highlight_end":55},{"text":"                                if attr.path().is_ident(\"config\") {","highlight_start":1,"highlight_end":68},{"text":"                                    if let Ok(meta) = attr.parse_nested_meta(|meta| {","highlight_start":1,"highlight_end":86},{"text":"                                        if meta.path.is_ident(\"default\") {","highlight_start":1,"highlight_end":75},{"text":"                                            default_value = Some(meta.value()?.parse()?);","highlight_start":1,"highlight_end":90},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                        Ok(())","highlight_start":1,"highlight_end":47},{"text":"                                    }) {","highlight_start":1,"highlight_end":41},{"text":"                                        if let Some(value) = default_value {","highlight_start":1,"highlight_end":77},{"text":"                                            return value;","highlight_start":1,"highlight_end":58},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            Default::default()","highlight_start":1,"highlight_end":47},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                    )*","highlight_start":1,"highlight_end":23},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[async_trait::async_trait]","highlight_start":1,"highlight_end":36},{"text":"        impl ConfigReload for #name {","highlight_start":1,"highlight_end":38},{"text":"            async fn reload(&mut self) -> Result<(), ConfigError> {","highlight_start":1,"highlight_end":68},{"text":"                // Try loading from file first","highlight_start":1,"highlight_end":47},{"text":"                if let Ok(new_config) = Self::from_file(\"config.yml\") {","highlight_start":1,"highlight_end":72},{"text":"                    *self = new_config;","highlight_start":1,"highlight_end":40},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                // Then override with environment variables","highlight_start":1,"highlight_end":60},{"text":"                self.load_env()?;","highlight_start":1,"highlight_end":34},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                // Validate after reload","highlight_start":1,"highlight_end":41},{"text":"                self.validate()?;","highlight_start":1,"highlight_end":34},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                Ok(())","highlight_start":1,"highlight_end":23},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // Implement serialization traits","highlight_start":1,"highlight_end":42},{"text":"        impl serde::Serialize for #name {","highlight_start":1,"highlight_end":42},{"text":"            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>","highlight_start":1,"highlight_end":77},{"text":"            where","highlight_start":1,"highlight_end":18},{"text":"                S: serde::Serializer,","highlight_start":1,"highlight_end":38},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use serde::ser::SerializeStruct;","highlight_start":1,"highlight_end":49},{"text":"                let mut state = serializer.serialize_struct(stringify!(#name), #field_names.len())?;","highlight_start":1,"highlight_end":101},{"text":"                #(","highlight_start":1,"highlight_end":19},{"text":"                    state.serialize_field(stringify!(#field_names), &self.#field_names)?;","highlight_start":1,"highlight_end":90},{"text":"                )*","highlight_start":1,"highlight_end":19},{"text":"                state.end()","highlight_start":1,"highlight_end":28},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<'de> serde::Deserialize<'de> for #name {","highlight_start":1,"highlight_end":54},{"text":"            fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>","highlight_start":1,"highlight_end":73},{"text":"            where","highlight_start":1,"highlight_end":18},{"text":"                D: serde::Deserializer<'de>,","highlight_start":1,"highlight_end":45},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use serde::de::{self, Visitor};","highlight_start":1,"highlight_end":48},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                struct ConfigVisitor;","highlight_start":1,"highlight_end":38},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                impl<'de> Visitor<'de> for ConfigVisitor {","highlight_start":1,"highlight_end":59},{"text":"                    type Value = #name;","highlight_start":1,"highlight_end":40},{"text":"                    ","highlight_start":1,"highlight_end":21},{"text":"                    fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {","highlight_start":1,"highlight_end":99},{"text":"                        formatter.write_str(concat!(\"struct \", stringify!(#name)))","highlight_start":1,"highlight_end":83},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    ","highlight_start":1,"highlight_end":21},{"text":"                    fn visit_map<V>(self, mut map: V) -> Result<#name, V::Error>","highlight_start":1,"highlight_end":81},{"text":"                    where","highlight_start":1,"highlight_end":26},{"text":"                        V: de::MapAccess<'de>,","highlight_start":1,"highlight_end":47},{"text":"                    {","highlight_start":1,"highlight_end":22},{"text":"                        let mut config = #name::default();","highlight_start":1,"highlight_end":59},{"text":"                        while let Some(key) = map.next_key()? {","highlight_start":1,"highlight_end":64},{"text":"                            match key {","highlight_start":1,"highlight_end":40},{"text":"                                #(","highlight_start":1,"highlight_end":35},{"text":"                                    stringify!(#field_names) => {","highlight_start":1,"highlight_end":66},{"text":"                                        config.#field_names = map.next_value()?;","highlight_start":1,"highlight_end":81},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                )*","highlight_start":1,"highlight_end":35},{"text":"                                _ => {","highlight_start":1,"highlight_end":39},{"text":"                                    let _ = map.next_value::<de::IgnoredAny>()?;","highlight_start":1,"highlight_end":81},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Ok(config)","highlight_start":1,"highlight_end":35},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                deserializer.deserialize_map(ConfigVisitor)","highlight_start":1,"highlight_end":60},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"quote!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":17600,"byte_end":17618,"line_start":500,"line_end":500,"column_start":5,"column_end":23,"is_primary":false,"text":[{"text":"    macro_rules! quote {","highlight_start":5,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_each_token!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":29528,"byte_end":29557,"line_start":829,"line_end":829,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"macro_rules! quote_each_token {","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_tokens_with_context!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":30486,"byte_end":30524,"line_start":863,"line_end":863,"column_start":1,"column_end":39,"is_primary":false,"text":[{"text":"macro_rules! quote_tokens_with_context {","highlight_start":1,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_token_with_context!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":31280,"byte_end":31317,"line_start":893,"line_end":893,"column_start":1,"column_end":38,"is_primary":false,"text":[{"text":"macro_rules! quote_token_with_context {","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_token!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":37501,"byte_end":37525,"line_start":1024,"line_end":1024,"column_start":1,"column_end":25,"is_primary":false,"text":[{"text":"macro_rules! quote_token {","highlight_start":1,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":17600,"byte_end":17618,"line_start":500,"line_end":500,"column_start":5,"column_end":23,"is_primary":false,"text":[{"text":"    macro_rules! quote {","highlight_start":5,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_each_token!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":29528,"byte_end":29557,"line_start":829,"line_end":829,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"macro_rules! quote_each_token {","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_tokens_with_context!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":30486,"byte_end":30524,"line_start":863,"line_end":863,"column_start":1,"column_end":39,"is_primary":false,"text":[{"text":"macro_rules! quote_tokens_with_context {","highlight_start":1,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_token_with_context!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":31280,"byte_end":31317,"line_start":893,"line_end":893,"column_start":1,"column_end":38,"is_primary":false,"text":[{"text":"macro_rules! quote_token_with_context {","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_token!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":37501,"byte_end":37525,"line_start":1024,"line_end":1024,"column_start":1,"column_end":25,"is_primary":false,"text":[{"text":"macro_rules! quote_token {","highlight_start":1,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":17600,"byte_end":17618,"line_start":500,"line_end":500,"column_start":5,"column_end":23,"is_primary":false,"text":[{"text":"    macro_rules! quote {","highlight_start":5,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_each_token!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":29528,"byte_end":29557,"line_start":829,"line_end":829,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"macro_rules! quote_each_token {","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_tokens_with_context!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":30486,"byte_end":30524,"line_start":863,"line_end":863,"column_start":1,"column_end":39,"is_primary":false,"text":[{"text":"macro_rules! quote_tokens_with_context {","highlight_start":1,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_token_with_context!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":31280,"byte_end":31317,"line_start":893,"line_end":893,"column_start":1,"column_end":38,"is_primary":false,"text":[{"text":"macro_rules! quote_token_with_context {","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_each_token!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":29528,"byte_end":29557,"line_start":829,"line_end":829,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"macro_rules! quote_each_token {","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_tokens_with_context!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":30486,"byte_end":30524,"line_start":863,"line_end":863,"column_start":1,"column_end":39,"is_primary":false,"text":[{"text":"macro_rules! quote_tokens_with_context {","highlight_start":1,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_token_with_context!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":31280,"byte_end":31317,"line_start":893,"line_end":893,"column_start":1,"column_end":38,"is_primary":false,"text":[{"text":"macro_rules! quote_token_with_context {","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_token!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":37501,"byte_end":37525,"line_start":1024,"line_end":1024,"column_start":1,"column_end":25,"is_primary":false,"text":[{"text":"macro_rules! quote_token {","highlight_start":1,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":17600,"byte_end":17618,"line_start":500,"line_end":500,"column_start":5,"column_end":23,"is_primary":false,"text":[{"text":"    macro_rules! quote {","highlight_start":5,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_each_token!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":29528,"byte_end":29557,"line_start":829,"line_end":829,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"macro_rules! quote_each_token {","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_tokens_with_context!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":30486,"byte_end":30524,"line_start":863,"line_end":863,"column_start":1,"column_end":39,"is_primary":false,"text":[{"text":"macro_rules! quote_tokens_with_context {","highlight_start":1,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_token_with_context!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":31280,"byte_end":31317,"line_start":893,"line_end":893,"column_start":1,"column_end":38,"is_primary":false,"text":[{"text":"macro_rules! quote_token_with_context {","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `ToTokens`:\n  &'a T\n  &'a mut T\n  Abstract\n  AndAnd\n  AndEq\n  AngleBracketedGenericArguments\n  Arm\n  As\nand 306 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&Vec<Attribute>` to implement `ToTokens`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"2 redundant requirements hidden","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `RepInterp<&&Vec<Attribute>>` to implement `ToTokens`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: the trait bound `Vec<Attribute>: ToTokens` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mcrates\\genies_derive\\src\\lib.rs:70:20\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m70\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    let expanded = quote! {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m____________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m71\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        impl #name {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m72\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            /// Validate the configuration\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m73\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            pub fn validate(&self) -> Result<(), ConfigError> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m460\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m461\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    };\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_____\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `ToTokens` is not implemented for `Vec<Attribute>`, which is required by `RepInterp<&&Vec<Attribute>>: ToTokens`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: the following other types implement trait `ToTokens`:\u001b[0m\n\u001b[0m              &'a T\u001b[0m\n\u001b[0m              &'a mut T\u001b[0m\n\u001b[0m              Abstract\u001b[0m\n\u001b[0m              AndAnd\u001b[0m\n\u001b[0m              AndEq\u001b[0m\n\u001b[0m              AngleBracketedGenericArguments\u001b[0m\n\u001b[0m              Arm\u001b[0m\n\u001b[0m              As\u001b[0m\n\u001b[0m            and 306 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: required for `&Vec<Attribute>` to implement `ToTokens`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: 2 redundant requirements hidden\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: required for `RepInterp<&&Vec<Attribute>>` to implement `ToTokens`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `$crate::quote_token_with_context` which comes from the expansion of the macro `quote` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Vec<Attribute>: ToTokens` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":34208,"byte_end":34213,"line_start":951,"line_end":951,"column_start":37,"column_end":42,"is_primary":true,"text":[{"text":"        $crate::ToTokens::to_tokens(&$var, &mut $tokens);","highlight_start":37,"highlight_end":42}],"label":"the trait `ToTokens` is not implemented for `Vec<Attribute>`, which is required by `RepInterp<&&Vec<Attribute>>: ToTokens`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":30697,"byte_end":30769,"line_start":870,"line_end":870,"column_start":13,"column_end":85,"is_primary":false,"text":[{"text":"            $crate::quote_token_with_context!{$tokens $b3 $b2 $b1 $curr $a1 $a2 $a3}","highlight_start":13,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":29605,"byte_end":29904,"line_start":831,"line_end":839,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        $crate::quote_tokens_with_context!{$tokens","highlight_start":9,"highlight_end":51},{"text":"            (@ @ @ @ @ @ $($tts)*)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ @ $($tts)* @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ $($tts)* @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ $(($tts))* @ @ @)","highlight_start":1,"highlight_end":37},{"text":"            (@ @ $($tts)* @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ $($tts)* @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            ($($tts)* @ @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":18514,"byte_end":18551,"line_start":528,"line_end":528,"column_start":13,"column_end":50,"is_primary":false,"text":[{"text":"            $crate::quote_each_token!{_s $($tt)*}","highlight_start":13,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":38346,"byte_end":38372,"line_start":1053,"line_end":1053,"column_start":13,"column_end":39,"is_primary":false,"text":[{"text":"            $crate::quote!($($inner)*),","highlight_start":13,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":34489,"byte_end":34524,"line_start":958,"line_end":958,"column_start":9,"column_end":44,"is_primary":false,"text":[{"text":"        $crate::quote_token!{$curr $tokens}","highlight_start":9,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":30697,"byte_end":30769,"line_start":870,"line_end":870,"column_start":13,"column_end":85,"is_primary":false,"text":[{"text":"            $crate::quote_token_with_context!{$tokens $b3 $b2 $b1 $curr $a1 $a2 $a3}","highlight_start":13,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":29605,"byte_end":29904,"line_start":831,"line_end":839,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        $crate::quote_tokens_with_context!{$tokens","highlight_start":9,"highlight_end":51},{"text":"            (@ @ @ @ @ @ $($tts)*)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ @ $($tts)* @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ $($tts)* @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ $(($tts))* @ @ @)","highlight_start":1,"highlight_end":37},{"text":"            (@ @ $($tts)* @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ $($tts)* @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            ($($tts)* @ @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":32425,"byte_end":32470,"line_start":912,"line_end":912,"column_start":13,"column_end":58,"is_primary":false,"text":[{"text":"            $crate::quote_each_token!{$tokens $($inner)*}","highlight_start":13,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":30697,"byte_end":30769,"line_start":870,"line_end":870,"column_start":13,"column_end":85,"is_primary":false,"text":[{"text":"            $crate::quote_token_with_context!{$tokens $b3 $b2 $b1 $curr $a1 $a2 $a3}","highlight_start":13,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":29605,"byte_end":29904,"line_start":831,"line_end":839,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        $crate::quote_tokens_with_context!{$tokens","highlight_start":9,"highlight_end":51},{"text":"            (@ @ @ @ @ @ $($tts)*)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ @ $($tts)* @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ $($tts)* @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ $(($tts))* @ @ @)","highlight_start":1,"highlight_end":37},{"text":"            (@ @ $($tts)* @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ $($tts)* @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            ($($tts)* @ @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":18514,"byte_end":18551,"line_start":528,"line_end":528,"column_start":13,"column_end":50,"is_primary":false,"text":[{"text":"            $crate::quote_each_token!{_s $($tt)*}","highlight_start":13,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":38346,"byte_end":38372,"line_start":1053,"line_end":1053,"column_start":13,"column_end":39,"is_primary":false,"text":[{"text":"            $crate::quote!($($inner)*),","highlight_start":13,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":18305,"byte_end":18334,"line_start":521,"line_end":521,"column_start":13,"column_end":42,"is_primary":false,"text":[{"text":"            $crate::quote_token!{$tt2 _s}","highlight_start":13,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":34489,"byte_end":34524,"line_start":958,"line_end":958,"column_start":9,"column_end":44,"is_primary":false,"text":[{"text":"        $crate::quote_token!{$curr $tokens}","highlight_start":9,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":30697,"byte_end":30769,"line_start":870,"line_end":870,"column_start":13,"column_end":85,"is_primary":false,"text":[{"text":"            $crate::quote_token_with_context!{$tokens $b3 $b2 $b1 $curr $a1 $a2 $a3}","highlight_start":13,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":29605,"byte_end":29904,"line_start":831,"line_end":839,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        $crate::quote_tokens_with_context!{$tokens","highlight_start":9,"highlight_end":51},{"text":"            (@ @ @ @ @ @ $($tts)*)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ @ $($tts)* @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ $($tts)* @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ $(($tts))* @ @ @)","highlight_start":1,"highlight_end":37},{"text":"            (@ @ $($tts)* @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ $($tts)* @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            ($($tts)* @ @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":18514,"byte_end":18551,"line_start":528,"line_end":528,"column_start":13,"column_end":50,"is_primary":false,"text":[{"text":"            $crate::quote_each_token!{_s $($tt)*}","highlight_start":13,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":38346,"byte_end":38372,"line_start":1053,"line_end":1053,"column_start":13,"column_end":39,"is_primary":false,"text":[{"text":"            $crate::quote!($($inner)*),","highlight_start":13,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":34489,"byte_end":34524,"line_start":958,"line_end":958,"column_start":9,"column_end":44,"is_primary":false,"text":[{"text":"        $crate::quote_token!{$curr $tokens}","highlight_start":9,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":30697,"byte_end":30769,"line_start":870,"line_end":870,"column_start":13,"column_end":85,"is_primary":false,"text":[{"text":"            $crate::quote_token_with_context!{$tokens $b3 $b2 $b1 $curr $a1 $a2 $a3}","highlight_start":13,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":29605,"byte_end":29904,"line_start":831,"line_end":839,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        $crate::quote_tokens_with_context!{$tokens","highlight_start":9,"highlight_end":51},{"text":"            (@ @ @ @ @ @ $($tts)*)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ @ $($tts)* @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ $($tts)* @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ $(($tts))* @ @ @)","highlight_start":1,"highlight_end":37},{"text":"            (@ @ $($tts)* @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ $($tts)* @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            ($($tts)* @ @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":18514,"byte_end":18551,"line_start":528,"line_end":528,"column_start":13,"column_end":50,"is_primary":false,"text":[{"text":"            $crate::quote_each_token!{_s $($tt)*}","highlight_start":13,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"crates\\genies_derive\\src\\lib.rs","byte_start":2221,"byte_end":19604,"line_start":70,"line_end":461,"column_start":20,"column_end":6,"is_primary":false,"text":[{"text":"    let expanded = quote! {","highlight_start":20,"highlight_end":28},{"text":"        impl #name {","highlight_start":1,"highlight_end":21},{"text":"            /// Validate the configuration","highlight_start":1,"highlight_end":43},{"text":"            pub fn validate(&self) -> Result<(), ConfigError> {","highlight_start":1,"highlight_end":64},{"text":"                #(","highlight_start":1,"highlight_end":19},{"text":"                    if let Err(e) = self.validate_field(stringify!(#field_names), &self.#field_names) {","highlight_start":1,"highlight_end":104},{"text":"                        return Err(e);","highlight_start":1,"highlight_end":39},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                )*","highlight_start":1,"highlight_end":19},{"text":"                Ok(())","highlight_start":1,"highlight_end":23},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            /// Load configuration from a YAML file","highlight_start":1,"highlight_end":52},{"text":"            pub fn from_file(path: &str) -> Result<Self, ConfigError> {","highlight_start":1,"highlight_end":72},{"text":"                let contents = std::fs::read_to_string(path)","highlight_start":1,"highlight_end":61},{"text":"                    .map_err(|e| ConfigError::FileError(format!(\"Failed to read config file: {}\", e)))?;","highlight_start":1,"highlight_end":105},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                serde_yaml::from_str(&contents)","highlight_start":1,"highlight_end":48},{"text":"                    .map_err(|e| ConfigError::ParseError(format!(\"Failed to parse config file: {}\", e)))","highlight_start":1,"highlight_end":105},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            /// Load configuration from multiple sources in order of priority:","highlight_start":1,"highlight_end":79},{"text":"            /// 1. Load from file (base configuration)","highlight_start":1,"highlight_end":55},{"text":"            /// 2. Override with environment variables (higher priority)","highlight_start":1,"highlight_end":73},{"text":"            pub fn from_sources(file_path: &str) -> Result<Self, ConfigError> {","highlight_start":1,"highlight_end":80},{"text":"                // First load from file","highlight_start":1,"highlight_end":40},{"text":"                let mut config = match Self::from_file(file_path) {","highlight_start":1,"highlight_end":68},{"text":"                    Ok(cfg) => cfg,","highlight_start":1,"highlight_end":36},{"text":"                    Err(e) => {","highlight_start":1,"highlight_end":32},{"text":"                        log::warn!(\"Failed to load config from file: {}, using defaults\", e);","highlight_start":1,"highlight_end":94},{"text":"                        Self::default()","highlight_start":1,"highlight_end":40},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                // Then override with environment variables","highlight_start":1,"highlight_end":60},{"text":"                if let Err(e) = config.load_env() {","highlight_start":1,"highlight_end":52},{"text":"                    log::warn!(\"Failed to load config from environment: {}\", e);","highlight_start":1,"highlight_end":81},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                // Validate the final configuration","highlight_start":1,"highlight_end":52},{"text":"                config.validate()?;","highlight_start":1,"highlight_end":36},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                Ok(config)","highlight_start":1,"highlight_end":27},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            /// Merge with another configuration","highlight_start":1,"highlight_end":49},{"text":"            pub fn merge(&mut self, other: Self) {","highlight_start":1,"highlight_end":51},{"text":"                #(","highlight_start":1,"highlight_end":19},{"text":"                    self.#field_names = other.#field_names;","highlight_start":1,"highlight_end":60},{"text":"                )*","highlight_start":1,"highlight_end":19},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            /// Parse a string into a value of type T","highlight_start":1,"highlight_end":54},{"text":"            fn parse_value<T: FromStr>(value: &str) -> Result<T, ConfigError>","highlight_start":1,"highlight_end":78},{"text":"            where","highlight_start":1,"highlight_end":18},{"text":"                T::Err: std::fmt::Display,","highlight_start":1,"highlight_end":43},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                value.parse()","highlight_start":1,"highlight_end":30},{"text":"                    .map_err(|e| ConfigError::ParseError(format!(\"Failed to parse value '{}': {}\", value, e)))","highlight_start":1,"highlight_end":111},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            /// Parse a comma-separated string into a Vec<T>","highlight_start":1,"highlight_end":61},{"text":"            fn parse_array<T: FromStr>(value: &str) -> Result<Vec<T>, ConfigError>","highlight_start":1,"highlight_end":83},{"text":"            where","highlight_start":1,"highlight_end":18},{"text":"                T::Err: std::fmt::Display,","highlight_start":1,"highlight_end":43},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                value.split(',')","highlight_start":1,"highlight_end":33},{"text":"                    .map(|s| s.trim())","highlight_start":1,"highlight_end":39},{"text":"                    .filter(|s| !s.is_empty())","highlight_start":1,"highlight_end":47},{"text":"                    .map(|s| Self::parse_value::<T>(s))","highlight_start":1,"highlight_end":56},{"text":"                    .collect()","highlight_start":1,"highlight_end":31},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            /// Check if a type is Option<T>","highlight_start":1,"highlight_end":45},{"text":"            fn is_option_type(type_str: &str) -> bool {","highlight_start":1,"highlight_end":56},{"text":"                type_str.starts_with(\"Option < \")","highlight_start":1,"highlight_end":50},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            /// Extract inner type from Option<T>","highlight_start":1,"highlight_end":50},{"text":"            fn get_inner_type(type_str: &str) -> &str {","highlight_start":1,"highlight_end":56},{"text":"                if type_str.starts_with(\"Option < \") {","highlight_start":1,"highlight_end":55},{"text":"                    let start = \"Option < \".len();","highlight_start":1,"highlight_end":51},{"text":"                    let end = type_str.len() - 2; // Remove trailing \" >\"","highlight_start":1,"highlight_end":74},{"text":"                    &type_str[start..end]","highlight_start":1,"highlight_end":42},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    type_str","highlight_start":1,"highlight_end":29},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            /// Parse a string into an Option<T>","highlight_start":1,"highlight_end":49},{"text":"            fn parse_option<T: FromStr>(value: &str) -> Result<Option<T>, ConfigError>","highlight_start":1,"highlight_end":87},{"text":"            where","highlight_start":1,"highlight_end":18},{"text":"                T::Err: std::fmt::Display,","highlight_start":1,"highlight_end":43},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                if value.trim().is_empty() {","highlight_start":1,"highlight_end":45},{"text":"                    Ok(None)","highlight_start":1,"highlight_end":29},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    Ok(Some(Self::parse_value(value)?))","highlight_start":1,"highlight_end":56},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            /// Parse a string into a value based on its type","highlight_start":1,"highlight_end":62},{"text":"            fn parse_type(type_str: &str, value: &str) -> Result<Box<dyn std::any::Any>, ConfigError> {","highlight_start":1,"highlight_end":104},{"text":"                let inner_type = Self::get_inner_type(type_str);","highlight_start":1,"highlight_end":65},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                let result: Box<dyn std::any::Any> = match inner_type {","highlight_start":1,"highlight_end":72},{"text":"                    \"String\" => if Self::is_option_type(type_str) {","highlight_start":1,"highlight_end":68},{"text":"                        Box::new(Self::parse_option::<String>(value)?)","highlight_start":1,"highlight_end":71},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Box::new(Self::parse_value::<String>(value)?)","highlight_start":1,"highlight_end":70},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"i32\" => if Self::is_option_type(type_str) {","highlight_start":1,"highlight_end":65},{"text":"                        Box::new(Self::parse_option::<i32>(value)?)","highlight_start":1,"highlight_end":68},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Box::new(Self::parse_value::<i32>(value)?)","highlight_start":1,"highlight_end":67},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"i64\" => if Self::is_option_type(type_str) {","highlight_start":1,"highlight_end":65},{"text":"                        Box::new(Self::parse_option::<i64>(value)?)","highlight_start":1,"highlight_end":68},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Box::new(Self::parse_value::<i64>(value)?)","highlight_start":1,"highlight_end":67},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"u32\" => if Self::is_option_type(type_str) {","highlight_start":1,"highlight_end":65},{"text":"                        Box::new(Self::parse_option::<u32>(value)?)","highlight_start":1,"highlight_end":68},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Box::new(Self::parse_value::<u32>(value)?)","highlight_start":1,"highlight_end":67},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"u64\" => if Self::is_option_type(type_str) {","highlight_start":1,"highlight_end":65},{"text":"                        Box::new(Self::parse_option::<u64>(value)?)","highlight_start":1,"highlight_end":68},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Box::new(Self::parse_value::<u64>(value)?)","highlight_start":1,"highlight_end":67},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"f32\" => if Self::is_option_type(type_str) {","highlight_start":1,"highlight_end":65},{"text":"                        Box::new(Self::parse_option::<f32>(value)?)","highlight_start":1,"highlight_end":68},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Box::new(Self::parse_value::<f32>(value)?)","highlight_start":1,"highlight_end":67},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"f64\" => if Self::is_option_type(type_str) {","highlight_start":1,"highlight_end":65},{"text":"                        Box::new(Self::parse_option::<f64>(value)?)","highlight_start":1,"highlight_end":68},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Box::new(Self::parse_value::<f64>(value)?)","highlight_start":1,"highlight_end":67},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"bool\" => if Self::is_option_type(type_str) {","highlight_start":1,"highlight_end":66},{"text":"                        Box::new(Self::parse_option::<bool>(value)?)","highlight_start":1,"highlight_end":69},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Box::new(Self::parse_value::<bool>(value)?)","highlight_start":1,"highlight_end":68},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    _ => if type_str.starts_with(\"Vec < \") {","highlight_start":1,"highlight_end":61},{"text":"                        // Handle array types","highlight_start":1,"highlight_end":46},{"text":"                        let element_type = type_str.trim_start_matches(\"Vec < \").trim_end_matches(\" >\");","highlight_start":1,"highlight_end":105},{"text":"                        match element_type {","highlight_start":1,"highlight_end":45},{"text":"                            \"String\" => Box::new(Self::parse_array::<String>(value)?),","highlight_start":1,"highlight_end":87},{"text":"                            \"i32\" => Box::new(Self::parse_array::<i32>(value)?),","highlight_start":1,"highlight_end":81},{"text":"                            \"i64\" => Box::new(Self::parse_array::<i64>(value)?),","highlight_start":1,"highlight_end":81},{"text":"                            \"u32\" => Box::new(Self::parse_array::<u32>(value)?),","highlight_start":1,"highlight_end":81},{"text":"                            \"u64\" => Box::new(Self::parse_array::<u64>(value)?),","highlight_start":1,"highlight_end":81},{"text":"                            \"f32\" => Box::new(Self::parse_array::<f32>(value)?),","highlight_start":1,"highlight_end":81},{"text":"                            \"f64\" => Box::new(Self::parse_array::<f64>(value)?),","highlight_start":1,"highlight_end":81},{"text":"                            \"bool\" => Box::new(Self::parse_array::<bool>(value)?),","highlight_start":1,"highlight_end":83},{"text":"                            _ => return Err(ConfigError::ParseError(","highlight_start":1,"highlight_end":69},{"text":"                                format!(\"Unsupported array element type: {}\", element_type)","highlight_start":1,"highlight_end":92},{"text":"                            )),","highlight_start":1,"highlight_end":32},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        return Err(ConfigError::ParseError(","highlight_start":1,"highlight_end":60},{"text":"                            format!(\"Unsupported type: {}\", type_str)","highlight_start":1,"highlight_end":70},{"text":"                        ));","highlight_start":1,"highlight_end":28},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                Ok(result)","highlight_start":1,"highlight_end":27},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            /// Load configuration from environment variables, overriding existing values","highlight_start":1,"highlight_end":90},{"text":"            pub fn load_env(&mut self) -> Result<(), ConfigError> {","highlight_start":1,"highlight_end":68},{"text":"                #(","highlight_start":1,"highlight_end":19},{"text":"                    if let Ok(value) = std::env::var(#field_env_names) {","highlight_start":1,"highlight_end":73},{"text":"                        let field_type = stringify!(#field_types);","highlight_start":1,"highlight_end":67},{"text":"                        let parsed_value = Self::parse_type(field_type, &value)?;","highlight_start":1,"highlight_end":82},{"text":"                        ","highlight_start":1,"highlight_end":25},{"text":"                        // Downcast to the correct type","highlight_start":1,"highlight_end":56},{"text":"                        if let Some(v) = parsed_value.downcast_ref() {","highlight_start":1,"highlight_end":71},{"text":"                            self.#field_names = v.clone();","highlight_start":1,"highlight_end":59},{"text":"                        } else {","highlight_start":1,"highlight_end":33},{"text":"                            return Err(ConfigError::ParseError(","highlight_start":1,"highlight_end":64},{"text":"                                format!(\"Type mismatch for field {}\", stringify!(#field_names))","highlight_start":1,"highlight_end":96},{"text":"                            ));","highlight_start":1,"highlight_end":32},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    } else if Self::is_option_type(stringify!(#field_types)) {","highlight_start":1,"highlight_end":79},{"text":"                        // For Option types, set to None if environment variable is not present","highlight_start":1,"highlight_end":96},{"text":"                        self.#field_names = None;","highlight_start":1,"highlight_end":50},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                )*","highlight_start":1,"highlight_end":19},{"text":"                Ok(())","highlight_start":1,"highlight_end":23},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            /// Create a new builder","highlight_start":1,"highlight_end":37},{"text":"            pub fn builder() -> #name Builder {","highlight_start":1,"highlight_end":48},{"text":"                #name Builder::default()","highlight_start":1,"highlight_end":41},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // Private validation helper","highlight_start":1,"highlight_end":41},{"text":"            fn validate_field<T>(&self, field_name: &str, value: &T) -> Result<(), ConfigError> {","highlight_start":1,"highlight_end":98},{"text":"                // Add field-specific validation based on attributes","highlight_start":1,"highlight_end":69},{"text":"                #(","highlight_start":1,"highlight_end":19},{"text":"                    if field_name == stringify!(#field_names) {","highlight_start":1,"highlight_end":64},{"text":"                        for attr in #field_attrs {","highlight_start":1,"highlight_end":51},{"text":"                            if attr.path().is_ident(\"config\") {","highlight_start":1,"highlight_end":64},{"text":"                                if let Ok(meta) = attr.parse_nested_meta(|meta| {","highlight_start":1,"highlight_end":82},{"text":"                                    if meta.path.is_ident(\"validate\") {","highlight_start":1,"highlight_end":72},{"text":"                                        // Parse validation rules","highlight_start":1,"highlight_end":66},{"text":"                                        meta.parse_nested_meta(|nested| {","highlight_start":1,"highlight_end":74},{"text":"                                            if nested.path.is_ident(\"range\") {","highlight_start":1,"highlight_end":79},{"text":"                                                // Handle range validation","highlight_start":1,"highlight_end":75},{"text":"                                                let min = nested.value()?.parse_nested_meta(|m| {","highlight_start":1,"highlight_end":98},{"text":"                                                    if m.path.is_ident(\"min\") {","highlight_start":1,"highlight_end":80},{"text":"                                                        Ok(m.value()?.parse()?)","highlight_start":1,"highlight_end":80},{"text":"                                                    } else {","highlight_start":1,"highlight_end":61},{"text":"                                                        Ok(std::u64::MIN)","highlight_start":1,"highlight_end":74},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                })?;","highlight_start":1,"highlight_end":53},{"text":"                                                let max = nested.value()?.parse_nested_meta(|m| {","highlight_start":1,"highlight_end":98},{"text":"                                                    if m.path.is_ident(\"max\") {","highlight_start":1,"highlight_end":80},{"text":"                                                        Ok(m.value()?.parse()?)","highlight_start":1,"highlight_end":80},{"text":"                                                    } else {","highlight_start":1,"highlight_end":61},{"text":"                                                        Ok(std::u64::MAX)","highlight_start":1,"highlight_end":74},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                })?;","highlight_start":1,"highlight_end":53},{"text":"                                                ","highlight_start":1,"highlight_end":49},{"text":"                                                // Perform range validation","highlight_start":1,"highlight_end":76},{"text":"                                                let value = value.to_string().parse::<u64>()","highlight_start":1,"highlight_end":93},{"text":"                                                    .map_err(|_| ConfigError::ValidationError(","highlight_start":1,"highlight_end":95},{"text":"                                                        format!(\"Invalid value for {}\", field_name)","highlight_start":1,"highlight_end":100},{"text":"                                                    ))?;","highlight_start":1,"highlight_end":57},{"text":"                                                if value < min || value > max {","highlight_start":1,"highlight_end":80},{"text":"                                                    return Err(ConfigError::ValidationError(","highlight_start":1,"highlight_end":93},{"text":"                                                        format!(\"{} must be between {} and {}\", field_name, min, max)","highlight_start":1,"highlight_end":118},{"text":"                                                    ));","highlight_start":1,"highlight_end":56},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                            }","highlight_start":1,"highlight_end":46},{"text":"                                            Ok(())","highlight_start":1,"highlight_end":51},{"text":"                                        })?;","highlight_start":1,"highlight_end":45},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                    Ok(())","highlight_start":1,"highlight_end":43},{"text":"                                }) {","highlight_start":1,"highlight_end":37},{"text":"                                    if let Err(e) = meta {","highlight_start":1,"highlight_end":59},{"text":"                                        return Err(ConfigError::ValidationError(e.to_string()));","highlight_start":1,"highlight_end":97},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                )*","highlight_start":1,"highlight_end":19},{"text":"                Ok(())","highlight_start":1,"highlight_end":23},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            /// Convert configuration to a different type","highlight_start":1,"highlight_end":58},{"text":"            pub fn convert<T: TryFrom<Self>>(&self) -> Result<T, ConfigError> {","highlight_start":1,"highlight_end":80},{"text":"                T::try_from(self.clone())","highlight_start":1,"highlight_end":42},{"text":"                    .map_err(|_| ConfigError::ConversionError(","highlight_start":1,"highlight_end":63},{"text":"                        format!(\"Failed to convert {} to target type\", stringify!(#name))","highlight_start":1,"highlight_end":90},{"text":"                    ))","highlight_start":1,"highlight_end":23},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        /// Builder for #name","highlight_start":1,"highlight_end":30},{"text":"        #[derive(Default)]","highlight_start":1,"highlight_end":27},{"text":"        pub struct #name Builder {","highlight_start":1,"highlight_end":35},{"text":"            #(","highlight_start":1,"highlight_end":15},{"text":"                #field_names: #builder_field_types,","highlight_start":1,"highlight_end":52},{"text":"            )*","highlight_start":1,"highlight_end":15},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl #name Builder {","highlight_start":1,"highlight_end":29},{"text":"            #(","highlight_start":1,"highlight_end":15},{"text":"                pub fn #field_names(mut self, value: #field_types) -> Self {","highlight_start":1,"highlight_end":77},{"text":"                    self.#field_names = Some(value);","highlight_start":1,"highlight_end":53},{"text":"                    self","highlight_start":1,"highlight_end":25},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            )*","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            pub fn build(self) -> Result<#name, ConfigError> {","highlight_start":1,"highlight_end":63},{"text":"                Ok(#name {","highlight_start":1,"highlight_end":27},{"text":"                    #(","highlight_start":1,"highlight_end":23},{"text":"                        #field_names: self.#field_names.ok_or_else(|| {","highlight_start":1,"highlight_end":72},{"text":"                            ConfigError::BuildError(format!(\"Missing required field: {}\", stringify!(#field_names)))","highlight_start":1,"highlight_end":117},{"text":"                        })?,","highlight_start":1,"highlight_end":29},{"text":"                    )*","highlight_start":1,"highlight_end":23},{"text":"                })","highlight_start":1,"highlight_end":19},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl Default for #name {","highlight_start":1,"highlight_end":33},{"text":"            fn default() -> Self {","highlight_start":1,"highlight_end":35},{"text":"                Self {","highlight_start":1,"highlight_end":23},{"text":"                    #(","highlight_start":1,"highlight_end":23},{"text":"                        #field_names: {","highlight_start":1,"highlight_end":40},{"text":"                            let mut default_value = None;","highlight_start":1,"highlight_end":58},{"text":"                            for attr in #field_attrs {","highlight_start":1,"highlight_end":55},{"text":"                                if attr.path().is_ident(\"config\") {","highlight_start":1,"highlight_end":68},{"text":"                                    if let Ok(meta) = attr.parse_nested_meta(|meta| {","highlight_start":1,"highlight_end":86},{"text":"                                        if meta.path.is_ident(\"default\") {","highlight_start":1,"highlight_end":75},{"text":"                                            default_value = Some(meta.value()?.parse()?);","highlight_start":1,"highlight_end":90},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                        Ok(())","highlight_start":1,"highlight_end":47},{"text":"                                    }) {","highlight_start":1,"highlight_end":41},{"text":"                                        if let Some(value) = default_value {","highlight_start":1,"highlight_end":77},{"text":"                                            return value;","highlight_start":1,"highlight_end":58},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            Default::default()","highlight_start":1,"highlight_end":47},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                    )*","highlight_start":1,"highlight_end":23},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[async_trait::async_trait]","highlight_start":1,"highlight_end":36},{"text":"        impl ConfigReload for #name {","highlight_start":1,"highlight_end":38},{"text":"            async fn reload(&mut self) -> Result<(), ConfigError> {","highlight_start":1,"highlight_end":68},{"text":"                // Try loading from file first","highlight_start":1,"highlight_end":47},{"text":"                if let Ok(new_config) = Self::from_file(\"config.yml\") {","highlight_start":1,"highlight_end":72},{"text":"                    *self = new_config;","highlight_start":1,"highlight_end":40},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                // Then override with environment variables","highlight_start":1,"highlight_end":60},{"text":"                self.load_env()?;","highlight_start":1,"highlight_end":34},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                // Validate after reload","highlight_start":1,"highlight_end":41},{"text":"                self.validate()?;","highlight_start":1,"highlight_end":34},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                Ok(())","highlight_start":1,"highlight_end":23},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // Implement serialization traits","highlight_start":1,"highlight_end":42},{"text":"        impl serde::Serialize for #name {","highlight_start":1,"highlight_end":42},{"text":"            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>","highlight_start":1,"highlight_end":77},{"text":"            where","highlight_start":1,"highlight_end":18},{"text":"                S: serde::Serializer,","highlight_start":1,"highlight_end":38},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use serde::ser::SerializeStruct;","highlight_start":1,"highlight_end":49},{"text":"                let mut state = serializer.serialize_struct(stringify!(#name), #field_names.len())?;","highlight_start":1,"highlight_end":101},{"text":"                #(","highlight_start":1,"highlight_end":19},{"text":"                    state.serialize_field(stringify!(#field_names), &self.#field_names)?;","highlight_start":1,"highlight_end":90},{"text":"                )*","highlight_start":1,"highlight_end":19},{"text":"                state.end()","highlight_start":1,"highlight_end":28},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<'de> serde::Deserialize<'de> for #name {","highlight_start":1,"highlight_end":54},{"text":"            fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>","highlight_start":1,"highlight_end":73},{"text":"            where","highlight_start":1,"highlight_end":18},{"text":"                D: serde::Deserializer<'de>,","highlight_start":1,"highlight_end":45},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use serde::de::{self, Visitor};","highlight_start":1,"highlight_end":48},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                struct ConfigVisitor;","highlight_start":1,"highlight_end":38},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                impl<'de> Visitor<'de> for ConfigVisitor {","highlight_start":1,"highlight_end":59},{"text":"                    type Value = #name;","highlight_start":1,"highlight_end":40},{"text":"                    ","highlight_start":1,"highlight_end":21},{"text":"                    fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {","highlight_start":1,"highlight_end":99},{"text":"                        formatter.write_str(concat!(\"struct \", stringify!(#name)))","highlight_start":1,"highlight_end":83},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    ","highlight_start":1,"highlight_end":21},{"text":"                    fn visit_map<V>(self, mut map: V) -> Result<#name, V::Error>","highlight_start":1,"highlight_end":81},{"text":"                    where","highlight_start":1,"highlight_end":26},{"text":"                        V: de::MapAccess<'de>,","highlight_start":1,"highlight_end":47},{"text":"                    {","highlight_start":1,"highlight_end":22},{"text":"                        let mut config = #name::default();","highlight_start":1,"highlight_end":59},{"text":"                        while let Some(key) = map.next_key()? {","highlight_start":1,"highlight_end":64},{"text":"                            match key {","highlight_start":1,"highlight_end":40},{"text":"                                #(","highlight_start":1,"highlight_end":35},{"text":"                                    stringify!(#field_names) => {","highlight_start":1,"highlight_end":66},{"text":"                                        config.#field_names = map.next_value()?;","highlight_start":1,"highlight_end":81},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                )*","highlight_start":1,"highlight_end":35},{"text":"                                _ => {","highlight_start":1,"highlight_end":39},{"text":"                                    let _ = map.next_value::<de::IgnoredAny>()?;","highlight_start":1,"highlight_end":81},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Ok(config)","highlight_start":1,"highlight_end":35},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                deserializer.deserialize_map(ConfigVisitor)","highlight_start":1,"highlight_end":60},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"quote!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":17600,"byte_end":17618,"line_start":500,"line_end":500,"column_start":5,"column_end":23,"is_primary":false,"text":[{"text":"    macro_rules! quote {","highlight_start":5,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_each_token!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":29528,"byte_end":29557,"line_start":829,"line_end":829,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"macro_rules! quote_each_token {","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_tokens_with_context!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":30486,"byte_end":30524,"line_start":863,"line_end":863,"column_start":1,"column_end":39,"is_primary":false,"text":[{"text":"macro_rules! quote_tokens_with_context {","highlight_start":1,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_token_with_context!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":31280,"byte_end":31317,"line_start":893,"line_end":893,"column_start":1,"column_end":38,"is_primary":false,"text":[{"text":"macro_rules! quote_token_with_context {","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_token!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":37501,"byte_end":37525,"line_start":1024,"line_end":1024,"column_start":1,"column_end":25,"is_primary":false,"text":[{"text":"macro_rules! quote_token {","highlight_start":1,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":17600,"byte_end":17618,"line_start":500,"line_end":500,"column_start":5,"column_end":23,"is_primary":false,"text":[{"text":"    macro_rules! quote {","highlight_start":5,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_each_token!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":29528,"byte_end":29557,"line_start":829,"line_end":829,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"macro_rules! quote_each_token {","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_tokens_with_context!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":30486,"byte_end":30524,"line_start":863,"line_end":863,"column_start":1,"column_end":39,"is_primary":false,"text":[{"text":"macro_rules! quote_tokens_with_context {","highlight_start":1,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_token_with_context!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":31280,"byte_end":31317,"line_start":893,"line_end":893,"column_start":1,"column_end":38,"is_primary":false,"text":[{"text":"macro_rules! quote_token_with_context {","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_token!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":37501,"byte_end":37525,"line_start":1024,"line_end":1024,"column_start":1,"column_end":25,"is_primary":false,"text":[{"text":"macro_rules! quote_token {","highlight_start":1,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_token!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":37501,"byte_end":37525,"line_start":1024,"line_end":1024,"column_start":1,"column_end":25,"is_primary":false,"text":[{"text":"macro_rules! quote_token {","highlight_start":1,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":17600,"byte_end":17618,"line_start":500,"line_end":500,"column_start":5,"column_end":23,"is_primary":false,"text":[{"text":"    macro_rules! quote {","highlight_start":5,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_each_token!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":29528,"byte_end":29557,"line_start":829,"line_end":829,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"macro_rules! quote_each_token {","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_tokens_with_context!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":30486,"byte_end":30524,"line_start":863,"line_end":863,"column_start":1,"column_end":39,"is_primary":false,"text":[{"text":"macro_rules! quote_tokens_with_context {","highlight_start":1,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_token_with_context!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":31280,"byte_end":31317,"line_start":893,"line_end":893,"column_start":1,"column_end":38,"is_primary":false,"text":[{"text":"macro_rules! quote_token_with_context {","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_each_token!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":29528,"byte_end":29557,"line_start":829,"line_end":829,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"macro_rules! quote_each_token {","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_tokens_with_context!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":30486,"byte_end":30524,"line_start":863,"line_end":863,"column_start":1,"column_end":39,"is_primary":false,"text":[{"text":"macro_rules! quote_tokens_with_context {","highlight_start":1,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_token_with_context!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":31280,"byte_end":31317,"line_start":893,"line_end":893,"column_start":1,"column_end":38,"is_primary":false,"text":[{"text":"macro_rules! quote_token_with_context {","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_token!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":37501,"byte_end":37525,"line_start":1024,"line_end":1024,"column_start":1,"column_end":25,"is_primary":false,"text":[{"text":"macro_rules! quote_token {","highlight_start":1,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":17600,"byte_end":17618,"line_start":500,"line_end":500,"column_start":5,"column_end":23,"is_primary":false,"text":[{"text":"    macro_rules! quote {","highlight_start":5,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_each_token!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":29528,"byte_end":29557,"line_start":829,"line_end":829,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"macro_rules! quote_each_token {","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_tokens_with_context!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":30486,"byte_end":30524,"line_start":863,"line_end":863,"column_start":1,"column_end":39,"is_primary":false,"text":[{"text":"macro_rules! quote_tokens_with_context {","highlight_start":1,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_token_with_context!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":31280,"byte_end":31317,"line_start":893,"line_end":893,"column_start":1,"column_end":38,"is_primary":false,"text":[{"text":"macro_rules! quote_token_with_context {","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":34180,"byte_end":34207,"line_start":951,"line_end":951,"column_start":9,"column_end":36,"is_primary":false,"text":[{"text":"        $crate::ToTokens::to_tokens(&$var, &mut $tokens);","highlight_start":9,"highlight_end":36}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":30697,"byte_end":30769,"line_start":870,"line_end":870,"column_start":13,"column_end":85,"is_primary":false,"text":[{"text":"            $crate::quote_token_with_context!{$tokens $b3 $b2 $b1 $curr $a1 $a2 $a3}","highlight_start":13,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":29605,"byte_end":29904,"line_start":831,"line_end":839,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        $crate::quote_tokens_with_context!{$tokens","highlight_start":9,"highlight_end":51},{"text":"            (@ @ @ @ @ @ $($tts)*)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ @ $($tts)* @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ $($tts)* @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ $(($tts))* @ @ @)","highlight_start":1,"highlight_end":37},{"text":"            (@ @ $($tts)* @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ $($tts)* @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            ($($tts)* @ @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":18514,"byte_end":18551,"line_start":528,"line_end":528,"column_start":13,"column_end":50,"is_primary":false,"text":[{"text":"            $crate::quote_each_token!{_s $($tt)*}","highlight_start":13,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":38346,"byte_end":38372,"line_start":1053,"line_end":1053,"column_start":13,"column_end":39,"is_primary":false,"text":[{"text":"            $crate::quote!($($inner)*),","highlight_start":13,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":34489,"byte_end":34524,"line_start":958,"line_end":958,"column_start":9,"column_end":44,"is_primary":false,"text":[{"text":"        $crate::quote_token!{$curr $tokens}","highlight_start":9,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":30697,"byte_end":30769,"line_start":870,"line_end":870,"column_start":13,"column_end":85,"is_primary":false,"text":[{"text":"            $crate::quote_token_with_context!{$tokens $b3 $b2 $b1 $curr $a1 $a2 $a3}","highlight_start":13,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":29605,"byte_end":29904,"line_start":831,"line_end":839,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        $crate::quote_tokens_with_context!{$tokens","highlight_start":9,"highlight_end":51},{"text":"            (@ @ @ @ @ @ $($tts)*)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ @ $($tts)* @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ $($tts)* @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ $(($tts))* @ @ @)","highlight_start":1,"highlight_end":37},{"text":"            (@ @ $($tts)* @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ $($tts)* @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            ($($tts)* @ @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":32425,"byte_end":32470,"line_start":912,"line_end":912,"column_start":13,"column_end":58,"is_primary":false,"text":[{"text":"            $crate::quote_each_token!{$tokens $($inner)*}","highlight_start":13,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":30697,"byte_end":30769,"line_start":870,"line_end":870,"column_start":13,"column_end":85,"is_primary":false,"text":[{"text":"            $crate::quote_token_with_context!{$tokens $b3 $b2 $b1 $curr $a1 $a2 $a3}","highlight_start":13,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":29605,"byte_end":29904,"line_start":831,"line_end":839,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        $crate::quote_tokens_with_context!{$tokens","highlight_start":9,"highlight_end":51},{"text":"            (@ @ @ @ @ @ $($tts)*)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ @ $($tts)* @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ $($tts)* @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ $(($tts))* @ @ @)","highlight_start":1,"highlight_end":37},{"text":"            (@ @ $($tts)* @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ $($tts)* @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            ($($tts)* @ @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":18514,"byte_end":18551,"line_start":528,"line_end":528,"column_start":13,"column_end":50,"is_primary":false,"text":[{"text":"            $crate::quote_each_token!{_s $($tt)*}","highlight_start":13,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":38346,"byte_end":38372,"line_start":1053,"line_end":1053,"column_start":13,"column_end":39,"is_primary":false,"text":[{"text":"            $crate::quote!($($inner)*),","highlight_start":13,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":18305,"byte_end":18334,"line_start":521,"line_end":521,"column_start":13,"column_end":42,"is_primary":false,"text":[{"text":"            $crate::quote_token!{$tt2 _s}","highlight_start":13,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":34489,"byte_end":34524,"line_start":958,"line_end":958,"column_start":9,"column_end":44,"is_primary":false,"text":[{"text":"        $crate::quote_token!{$curr $tokens}","highlight_start":9,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":30697,"byte_end":30769,"line_start":870,"line_end":870,"column_start":13,"column_end":85,"is_primary":false,"text":[{"text":"            $crate::quote_token_with_context!{$tokens $b3 $b2 $b1 $curr $a1 $a2 $a3}","highlight_start":13,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":29605,"byte_end":29904,"line_start":831,"line_end":839,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        $crate::quote_tokens_with_context!{$tokens","highlight_start":9,"highlight_end":51},{"text":"            (@ @ @ @ @ @ $($tts)*)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ @ $($tts)* @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ $($tts)* @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ $(($tts))* @ @ @)","highlight_start":1,"highlight_end":37},{"text":"            (@ @ $($tts)* @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ $($tts)* @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            ($($tts)* @ @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":18514,"byte_end":18551,"line_start":528,"line_end":528,"column_start":13,"column_end":50,"is_primary":false,"text":[{"text":"            $crate::quote_each_token!{_s $($tt)*}","highlight_start":13,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":38346,"byte_end":38372,"line_start":1053,"line_end":1053,"column_start":13,"column_end":39,"is_primary":false,"text":[{"text":"            $crate::quote!($($inner)*),","highlight_start":13,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":34489,"byte_end":34524,"line_start":958,"line_end":958,"column_start":9,"column_end":44,"is_primary":false,"text":[{"text":"        $crate::quote_token!{$curr $tokens}","highlight_start":9,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":30697,"byte_end":30769,"line_start":870,"line_end":870,"column_start":13,"column_end":85,"is_primary":false,"text":[{"text":"            $crate::quote_token_with_context!{$tokens $b3 $b2 $b1 $curr $a1 $a2 $a3}","highlight_start":13,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":29605,"byte_end":29904,"line_start":831,"line_end":839,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        $crate::quote_tokens_with_context!{$tokens","highlight_start":9,"highlight_end":51},{"text":"            (@ @ @ @ @ @ $($tts)*)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ @ $($tts)* @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ $($tts)* @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ $(($tts))* @ @ @)","highlight_start":1,"highlight_end":37},{"text":"            (@ @ $($tts)* @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ $($tts)* @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            ($($tts)* @ @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":18514,"byte_end":18551,"line_start":528,"line_end":528,"column_start":13,"column_end":50,"is_primary":false,"text":[{"text":"            $crate::quote_each_token!{_s $($tt)*}","highlight_start":13,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"crates\\genies_derive\\src\\lib.rs","byte_start":2221,"byte_end":19604,"line_start":70,"line_end":461,"column_start":20,"column_end":6,"is_primary":false,"text":[{"text":"    let expanded = quote! {","highlight_start":20,"highlight_end":28},{"text":"        impl #name {","highlight_start":1,"highlight_end":21},{"text":"            /// Validate the configuration","highlight_start":1,"highlight_end":43},{"text":"            pub fn validate(&self) -> Result<(), ConfigError> {","highlight_start":1,"highlight_end":64},{"text":"                #(","highlight_start":1,"highlight_end":19},{"text":"                    if let Err(e) = self.validate_field(stringify!(#field_names), &self.#field_names) {","highlight_start":1,"highlight_end":104},{"text":"                        return Err(e);","highlight_start":1,"highlight_end":39},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                )*","highlight_start":1,"highlight_end":19},{"text":"                Ok(())","highlight_start":1,"highlight_end":23},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            /// Load configuration from a YAML file","highlight_start":1,"highlight_end":52},{"text":"            pub fn from_file(path: &str) -> Result<Self, ConfigError> {","highlight_start":1,"highlight_end":72},{"text":"                let contents = std::fs::read_to_string(path)","highlight_start":1,"highlight_end":61},{"text":"                    .map_err(|e| ConfigError::FileError(format!(\"Failed to read config file: {}\", e)))?;","highlight_start":1,"highlight_end":105},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                serde_yaml::from_str(&contents)","highlight_start":1,"highlight_end":48},{"text":"                    .map_err(|e| ConfigError::ParseError(format!(\"Failed to parse config file: {}\", e)))","highlight_start":1,"highlight_end":105},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            /// Load configuration from multiple sources in order of priority:","highlight_start":1,"highlight_end":79},{"text":"            /// 1. Load from file (base configuration)","highlight_start":1,"highlight_end":55},{"text":"            /// 2. Override with environment variables (higher priority)","highlight_start":1,"highlight_end":73},{"text":"            pub fn from_sources(file_path: &str) -> Result<Self, ConfigError> {","highlight_start":1,"highlight_end":80},{"text":"                // First load from file","highlight_start":1,"highlight_end":40},{"text":"                let mut config = match Self::from_file(file_path) {","highlight_start":1,"highlight_end":68},{"text":"                    Ok(cfg) => cfg,","highlight_start":1,"highlight_end":36},{"text":"                    Err(e) => {","highlight_start":1,"highlight_end":32},{"text":"                        log::warn!(\"Failed to load config from file: {}, using defaults\", e);","highlight_start":1,"highlight_end":94},{"text":"                        Self::default()","highlight_start":1,"highlight_end":40},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                // Then override with environment variables","highlight_start":1,"highlight_end":60},{"text":"                if let Err(e) = config.load_env() {","highlight_start":1,"highlight_end":52},{"text":"                    log::warn!(\"Failed to load config from environment: {}\", e);","highlight_start":1,"highlight_end":81},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                // Validate the final configuration","highlight_start":1,"highlight_end":52},{"text":"                config.validate()?;","highlight_start":1,"highlight_end":36},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                Ok(config)","highlight_start":1,"highlight_end":27},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            /// Merge with another configuration","highlight_start":1,"highlight_end":49},{"text":"            pub fn merge(&mut self, other: Self) {","highlight_start":1,"highlight_end":51},{"text":"                #(","highlight_start":1,"highlight_end":19},{"text":"                    self.#field_names = other.#field_names;","highlight_start":1,"highlight_end":60},{"text":"                )*","highlight_start":1,"highlight_end":19},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            /// Parse a string into a value of type T","highlight_start":1,"highlight_end":54},{"text":"            fn parse_value<T: FromStr>(value: &str) -> Result<T, ConfigError>","highlight_start":1,"highlight_end":78},{"text":"            where","highlight_start":1,"highlight_end":18},{"text":"                T::Err: std::fmt::Display,","highlight_start":1,"highlight_end":43},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                value.parse()","highlight_start":1,"highlight_end":30},{"text":"                    .map_err(|e| ConfigError::ParseError(format!(\"Failed to parse value '{}': {}\", value, e)))","highlight_start":1,"highlight_end":111},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            /// Parse a comma-separated string into a Vec<T>","highlight_start":1,"highlight_end":61},{"text":"            fn parse_array<T: FromStr>(value: &str) -> Result<Vec<T>, ConfigError>","highlight_start":1,"highlight_end":83},{"text":"            where","highlight_start":1,"highlight_end":18},{"text":"                T::Err: std::fmt::Display,","highlight_start":1,"highlight_end":43},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                value.split(',')","highlight_start":1,"highlight_end":33},{"text":"                    .map(|s| s.trim())","highlight_start":1,"highlight_end":39},{"text":"                    .filter(|s| !s.is_empty())","highlight_start":1,"highlight_end":47},{"text":"                    .map(|s| Self::parse_value::<T>(s))","highlight_start":1,"highlight_end":56},{"text":"                    .collect()","highlight_start":1,"highlight_end":31},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            /// Check if a type is Option<T>","highlight_start":1,"highlight_end":45},{"text":"            fn is_option_type(type_str: &str) -> bool {","highlight_start":1,"highlight_end":56},{"text":"                type_str.starts_with(\"Option < \")","highlight_start":1,"highlight_end":50},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            /// Extract inner type from Option<T>","highlight_start":1,"highlight_end":50},{"text":"            fn get_inner_type(type_str: &str) -> &str {","highlight_start":1,"highlight_end":56},{"text":"                if type_str.starts_with(\"Option < \") {","highlight_start":1,"highlight_end":55},{"text":"                    let start = \"Option < \".len();","highlight_start":1,"highlight_end":51},{"text":"                    let end = type_str.len() - 2; // Remove trailing \" >\"","highlight_start":1,"highlight_end":74},{"text":"                    &type_str[start..end]","highlight_start":1,"highlight_end":42},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    type_str","highlight_start":1,"highlight_end":29},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            /// Parse a string into an Option<T>","highlight_start":1,"highlight_end":49},{"text":"            fn parse_option<T: FromStr>(value: &str) -> Result<Option<T>, ConfigError>","highlight_start":1,"highlight_end":87},{"text":"            where","highlight_start":1,"highlight_end":18},{"text":"                T::Err: std::fmt::Display,","highlight_start":1,"highlight_end":43},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                if value.trim().is_empty() {","highlight_start":1,"highlight_end":45},{"text":"                    Ok(None)","highlight_start":1,"highlight_end":29},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    Ok(Some(Self::parse_value(value)?))","highlight_start":1,"highlight_end":56},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            /// Parse a string into a value based on its type","highlight_start":1,"highlight_end":62},{"text":"            fn parse_type(type_str: &str, value: &str) -> Result<Box<dyn std::any::Any>, ConfigError> {","highlight_start":1,"highlight_end":104},{"text":"                let inner_type = Self::get_inner_type(type_str);","highlight_start":1,"highlight_end":65},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                let result: Box<dyn std::any::Any> = match inner_type {","highlight_start":1,"highlight_end":72},{"text":"                    \"String\" => if Self::is_option_type(type_str) {","highlight_start":1,"highlight_end":68},{"text":"                        Box::new(Self::parse_option::<String>(value)?)","highlight_start":1,"highlight_end":71},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Box::new(Self::parse_value::<String>(value)?)","highlight_start":1,"highlight_end":70},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"i32\" => if Self::is_option_type(type_str) {","highlight_start":1,"highlight_end":65},{"text":"                        Box::new(Self::parse_option::<i32>(value)?)","highlight_start":1,"highlight_end":68},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Box::new(Self::parse_value::<i32>(value)?)","highlight_start":1,"highlight_end":67},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"i64\" => if Self::is_option_type(type_str) {","highlight_start":1,"highlight_end":65},{"text":"                        Box::new(Self::parse_option::<i64>(value)?)","highlight_start":1,"highlight_end":68},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Box::new(Self::parse_value::<i64>(value)?)","highlight_start":1,"highlight_end":67},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"u32\" => if Self::is_option_type(type_str) {","highlight_start":1,"highlight_end":65},{"text":"                        Box::new(Self::parse_option::<u32>(value)?)","highlight_start":1,"highlight_end":68},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Box::new(Self::parse_value::<u32>(value)?)","highlight_start":1,"highlight_end":67},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"u64\" => if Self::is_option_type(type_str) {","highlight_start":1,"highlight_end":65},{"text":"                        Box::new(Self::parse_option::<u64>(value)?)","highlight_start":1,"highlight_end":68},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Box::new(Self::parse_value::<u64>(value)?)","highlight_start":1,"highlight_end":67},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"f32\" => if Self::is_option_type(type_str) {","highlight_start":1,"highlight_end":65},{"text":"                        Box::new(Self::parse_option::<f32>(value)?)","highlight_start":1,"highlight_end":68},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Box::new(Self::parse_value::<f32>(value)?)","highlight_start":1,"highlight_end":67},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"f64\" => if Self::is_option_type(type_str) {","highlight_start":1,"highlight_end":65},{"text":"                        Box::new(Self::parse_option::<f64>(value)?)","highlight_start":1,"highlight_end":68},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Box::new(Self::parse_value::<f64>(value)?)","highlight_start":1,"highlight_end":67},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"bool\" => if Self::is_option_type(type_str) {","highlight_start":1,"highlight_end":66},{"text":"                        Box::new(Self::parse_option::<bool>(value)?)","highlight_start":1,"highlight_end":69},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Box::new(Self::parse_value::<bool>(value)?)","highlight_start":1,"highlight_end":68},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    _ => if type_str.starts_with(\"Vec < \") {","highlight_start":1,"highlight_end":61},{"text":"                        // Handle array types","highlight_start":1,"highlight_end":46},{"text":"                        let element_type = type_str.trim_start_matches(\"Vec < \").trim_end_matches(\" >\");","highlight_start":1,"highlight_end":105},{"text":"                        match element_type {","highlight_start":1,"highlight_end":45},{"text":"                            \"String\" => Box::new(Self::parse_array::<String>(value)?),","highlight_start":1,"highlight_end":87},{"text":"                            \"i32\" => Box::new(Self::parse_array::<i32>(value)?),","highlight_start":1,"highlight_end":81},{"text":"                            \"i64\" => Box::new(Self::parse_array::<i64>(value)?),","highlight_start":1,"highlight_end":81},{"text":"                            \"u32\" => Box::new(Self::parse_array::<u32>(value)?),","highlight_start":1,"highlight_end":81},{"text":"                            \"u64\" => Box::new(Self::parse_array::<u64>(value)?),","highlight_start":1,"highlight_end":81},{"text":"                            \"f32\" => Box::new(Self::parse_array::<f32>(value)?),","highlight_start":1,"highlight_end":81},{"text":"                            \"f64\" => Box::new(Self::parse_array::<f64>(value)?),","highlight_start":1,"highlight_end":81},{"text":"                            \"bool\" => Box::new(Self::parse_array::<bool>(value)?),","highlight_start":1,"highlight_end":83},{"text":"                            _ => return Err(ConfigError::ParseError(","highlight_start":1,"highlight_end":69},{"text":"                                format!(\"Unsupported array element type: {}\", element_type)","highlight_start":1,"highlight_end":92},{"text":"                            )),","highlight_start":1,"highlight_end":32},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        return Err(ConfigError::ParseError(","highlight_start":1,"highlight_end":60},{"text":"                            format!(\"Unsupported type: {}\", type_str)","highlight_start":1,"highlight_end":70},{"text":"                        ));","highlight_start":1,"highlight_end":28},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                Ok(result)","highlight_start":1,"highlight_end":27},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            /// Load configuration from environment variables, overriding existing values","highlight_start":1,"highlight_end":90},{"text":"            pub fn load_env(&mut self) -> Result<(), ConfigError> {","highlight_start":1,"highlight_end":68},{"text":"                #(","highlight_start":1,"highlight_end":19},{"text":"                    if let Ok(value) = std::env::var(#field_env_names) {","highlight_start":1,"highlight_end":73},{"text":"                        let field_type = stringify!(#field_types);","highlight_start":1,"highlight_end":67},{"text":"                        let parsed_value = Self::parse_type(field_type, &value)?;","highlight_start":1,"highlight_end":82},{"text":"                        ","highlight_start":1,"highlight_end":25},{"text":"                        // Downcast to the correct type","highlight_start":1,"highlight_end":56},{"text":"                        if let Some(v) = parsed_value.downcast_ref() {","highlight_start":1,"highlight_end":71},{"text":"                            self.#field_names = v.clone();","highlight_start":1,"highlight_end":59},{"text":"                        } else {","highlight_start":1,"highlight_end":33},{"text":"                            return Err(ConfigError::ParseError(","highlight_start":1,"highlight_end":64},{"text":"                                format!(\"Type mismatch for field {}\", stringify!(#field_names))","highlight_start":1,"highlight_end":96},{"text":"                            ));","highlight_start":1,"highlight_end":32},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    } else if Self::is_option_type(stringify!(#field_types)) {","highlight_start":1,"highlight_end":79},{"text":"                        // For Option types, set to None if environment variable is not present","highlight_start":1,"highlight_end":96},{"text":"                        self.#field_names = None;","highlight_start":1,"highlight_end":50},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                )*","highlight_start":1,"highlight_end":19},{"text":"                Ok(())","highlight_start":1,"highlight_end":23},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            /// Create a new builder","highlight_start":1,"highlight_end":37},{"text":"            pub fn builder() -> #name Builder {","highlight_start":1,"highlight_end":48},{"text":"                #name Builder::default()","highlight_start":1,"highlight_end":41},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // Private validation helper","highlight_start":1,"highlight_end":41},{"text":"            fn validate_field<T>(&self, field_name: &str, value: &T) -> Result<(), ConfigError> {","highlight_start":1,"highlight_end":98},{"text":"                // Add field-specific validation based on attributes","highlight_start":1,"highlight_end":69},{"text":"                #(","highlight_start":1,"highlight_end":19},{"text":"                    if field_name == stringify!(#field_names) {","highlight_start":1,"highlight_end":64},{"text":"                        for attr in #field_attrs {","highlight_start":1,"highlight_end":51},{"text":"                            if attr.path().is_ident(\"config\") {","highlight_start":1,"highlight_end":64},{"text":"                                if let Ok(meta) = attr.parse_nested_meta(|meta| {","highlight_start":1,"highlight_end":82},{"text":"                                    if meta.path.is_ident(\"validate\") {","highlight_start":1,"highlight_end":72},{"text":"                                        // Parse validation rules","highlight_start":1,"highlight_end":66},{"text":"                                        meta.parse_nested_meta(|nested| {","highlight_start":1,"highlight_end":74},{"text":"                                            if nested.path.is_ident(\"range\") {","highlight_start":1,"highlight_end":79},{"text":"                                                // Handle range validation","highlight_start":1,"highlight_end":75},{"text":"                                                let min = nested.value()?.parse_nested_meta(|m| {","highlight_start":1,"highlight_end":98},{"text":"                                                    if m.path.is_ident(\"min\") {","highlight_start":1,"highlight_end":80},{"text":"                                                        Ok(m.value()?.parse()?)","highlight_start":1,"highlight_end":80},{"text":"                                                    } else {","highlight_start":1,"highlight_end":61},{"text":"                                                        Ok(std::u64::MIN)","highlight_start":1,"highlight_end":74},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                })?;","highlight_start":1,"highlight_end":53},{"text":"                                                let max = nested.value()?.parse_nested_meta(|m| {","highlight_start":1,"highlight_end":98},{"text":"                                                    if m.path.is_ident(\"max\") {","highlight_start":1,"highlight_end":80},{"text":"                                                        Ok(m.value()?.parse()?)","highlight_start":1,"highlight_end":80},{"text":"                                                    } else {","highlight_start":1,"highlight_end":61},{"text":"                                                        Ok(std::u64::MAX)","highlight_start":1,"highlight_end":74},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                })?;","highlight_start":1,"highlight_end":53},{"text":"                                                ","highlight_start":1,"highlight_end":49},{"text":"                                                // Perform range validation","highlight_start":1,"highlight_end":76},{"text":"                                                let value = value.to_string().parse::<u64>()","highlight_start":1,"highlight_end":93},{"text":"                                                    .map_err(|_| ConfigError::ValidationError(","highlight_start":1,"highlight_end":95},{"text":"                                                        format!(\"Invalid value for {}\", field_name)","highlight_start":1,"highlight_end":100},{"text":"                                                    ))?;","highlight_start":1,"highlight_end":57},{"text":"                                                if value < min || value > max {","highlight_start":1,"highlight_end":80},{"text":"                                                    return Err(ConfigError::ValidationError(","highlight_start":1,"highlight_end":93},{"text":"                                                        format!(\"{} must be between {} and {}\", field_name, min, max)","highlight_start":1,"highlight_end":118},{"text":"                                                    ));","highlight_start":1,"highlight_end":56},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                            }","highlight_start":1,"highlight_end":46},{"text":"                                            Ok(())","highlight_start":1,"highlight_end":51},{"text":"                                        })?;","highlight_start":1,"highlight_end":45},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                    Ok(())","highlight_start":1,"highlight_end":43},{"text":"                                }) {","highlight_start":1,"highlight_end":37},{"text":"                                    if let Err(e) = meta {","highlight_start":1,"highlight_end":59},{"text":"                                        return Err(ConfigError::ValidationError(e.to_string()));","highlight_start":1,"highlight_end":97},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                )*","highlight_start":1,"highlight_end":19},{"text":"                Ok(())","highlight_start":1,"highlight_end":23},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            /// Convert configuration to a different type","highlight_start":1,"highlight_end":58},{"text":"            pub fn convert<T: TryFrom<Self>>(&self) -> Result<T, ConfigError> {","highlight_start":1,"highlight_end":80},{"text":"                T::try_from(self.clone())","highlight_start":1,"highlight_end":42},{"text":"                    .map_err(|_| ConfigError::ConversionError(","highlight_start":1,"highlight_end":63},{"text":"                        format!(\"Failed to convert {} to target type\", stringify!(#name))","highlight_start":1,"highlight_end":90},{"text":"                    ))","highlight_start":1,"highlight_end":23},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        /// Builder for #name","highlight_start":1,"highlight_end":30},{"text":"        #[derive(Default)]","highlight_start":1,"highlight_end":27},{"text":"        pub struct #name Builder {","highlight_start":1,"highlight_end":35},{"text":"            #(","highlight_start":1,"highlight_end":15},{"text":"                #field_names: #builder_field_types,","highlight_start":1,"highlight_end":52},{"text":"            )*","highlight_start":1,"highlight_end":15},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl #name Builder {","highlight_start":1,"highlight_end":29},{"text":"            #(","highlight_start":1,"highlight_end":15},{"text":"                pub fn #field_names(mut self, value: #field_types) -> Self {","highlight_start":1,"highlight_end":77},{"text":"                    self.#field_names = Some(value);","highlight_start":1,"highlight_end":53},{"text":"                    self","highlight_start":1,"highlight_end":25},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            )*","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            pub fn build(self) -> Result<#name, ConfigError> {","highlight_start":1,"highlight_end":63},{"text":"                Ok(#name {","highlight_start":1,"highlight_end":27},{"text":"                    #(","highlight_start":1,"highlight_end":23},{"text":"                        #field_names: self.#field_names.ok_or_else(|| {","highlight_start":1,"highlight_end":72},{"text":"                            ConfigError::BuildError(format!(\"Missing required field: {}\", stringify!(#field_names)))","highlight_start":1,"highlight_end":117},{"text":"                        })?,","highlight_start":1,"highlight_end":29},{"text":"                    )*","highlight_start":1,"highlight_end":23},{"text":"                })","highlight_start":1,"highlight_end":19},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl Default for #name {","highlight_start":1,"highlight_end":33},{"text":"            fn default() -> Self {","highlight_start":1,"highlight_end":35},{"text":"                Self {","highlight_start":1,"highlight_end":23},{"text":"                    #(","highlight_start":1,"highlight_end":23},{"text":"                        #field_names: {","highlight_start":1,"highlight_end":40},{"text":"                            let mut default_value = None;","highlight_start":1,"highlight_end":58},{"text":"                            for attr in #field_attrs {","highlight_start":1,"highlight_end":55},{"text":"                                if attr.path().is_ident(\"config\") {","highlight_start":1,"highlight_end":68},{"text":"                                    if let Ok(meta) = attr.parse_nested_meta(|meta| {","highlight_start":1,"highlight_end":86},{"text":"                                        if meta.path.is_ident(\"default\") {","highlight_start":1,"highlight_end":75},{"text":"                                            default_value = Some(meta.value()?.parse()?);","highlight_start":1,"highlight_end":90},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                        Ok(())","highlight_start":1,"highlight_end":47},{"text":"                                    }) {","highlight_start":1,"highlight_end":41},{"text":"                                        if let Some(value) = default_value {","highlight_start":1,"highlight_end":77},{"text":"                                            return value;","highlight_start":1,"highlight_end":58},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            Default::default()","highlight_start":1,"highlight_end":47},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                    )*","highlight_start":1,"highlight_end":23},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[async_trait::async_trait]","highlight_start":1,"highlight_end":36},{"text":"        impl ConfigReload for #name {","highlight_start":1,"highlight_end":38},{"text":"            async fn reload(&mut self) -> Result<(), ConfigError> {","highlight_start":1,"highlight_end":68},{"text":"                // Try loading from file first","highlight_start":1,"highlight_end":47},{"text":"                if let Ok(new_config) = Self::from_file(\"config.yml\") {","highlight_start":1,"highlight_end":72},{"text":"                    *self = new_config;","highlight_start":1,"highlight_end":40},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                // Then override with environment variables","highlight_start":1,"highlight_end":60},{"text":"                self.load_env()?;","highlight_start":1,"highlight_end":34},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                // Validate after reload","highlight_start":1,"highlight_end":41},{"text":"                self.validate()?;","highlight_start":1,"highlight_end":34},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                Ok(())","highlight_start":1,"highlight_end":23},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // Implement serialization traits","highlight_start":1,"highlight_end":42},{"text":"        impl serde::Serialize for #name {","highlight_start":1,"highlight_end":42},{"text":"            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>","highlight_start":1,"highlight_end":77},{"text":"            where","highlight_start":1,"highlight_end":18},{"text":"                S: serde::Serializer,","highlight_start":1,"highlight_end":38},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use serde::ser::SerializeStruct;","highlight_start":1,"highlight_end":49},{"text":"                let mut state = serializer.serialize_struct(stringify!(#name), #field_names.len())?;","highlight_start":1,"highlight_end":101},{"text":"                #(","highlight_start":1,"highlight_end":19},{"text":"                    state.serialize_field(stringify!(#field_names), &self.#field_names)?;","highlight_start":1,"highlight_end":90},{"text":"                )*","highlight_start":1,"highlight_end":19},{"text":"                state.end()","highlight_start":1,"highlight_end":28},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<'de> serde::Deserialize<'de> for #name {","highlight_start":1,"highlight_end":54},{"text":"            fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>","highlight_start":1,"highlight_end":73},{"text":"            where","highlight_start":1,"highlight_end":18},{"text":"                D: serde::Deserializer<'de>,","highlight_start":1,"highlight_end":45},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use serde::de::{self, Visitor};","highlight_start":1,"highlight_end":48},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                struct ConfigVisitor;","highlight_start":1,"highlight_end":38},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                impl<'de> Visitor<'de> for ConfigVisitor {","highlight_start":1,"highlight_end":59},{"text":"                    type Value = #name;","highlight_start":1,"highlight_end":40},{"text":"                    ","highlight_start":1,"highlight_end":21},{"text":"                    fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {","highlight_start":1,"highlight_end":99},{"text":"                        formatter.write_str(concat!(\"struct \", stringify!(#name)))","highlight_start":1,"highlight_end":83},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    ","highlight_start":1,"highlight_end":21},{"text":"                    fn visit_map<V>(self, mut map: V) -> Result<#name, V::Error>","highlight_start":1,"highlight_end":81},{"text":"                    where","highlight_start":1,"highlight_end":26},{"text":"                        V: de::MapAccess<'de>,","highlight_start":1,"highlight_end":47},{"text":"                    {","highlight_start":1,"highlight_end":22},{"text":"                        let mut config = #name::default();","highlight_start":1,"highlight_end":59},{"text":"                        while let Some(key) = map.next_key()? {","highlight_start":1,"highlight_end":64},{"text":"                            match key {","highlight_start":1,"highlight_end":40},{"text":"                                #(","highlight_start":1,"highlight_end":35},{"text":"                                    stringify!(#field_names) => {","highlight_start":1,"highlight_end":66},{"text":"                                        config.#field_names = map.next_value()?;","highlight_start":1,"highlight_end":81},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                )*","highlight_start":1,"highlight_end":35},{"text":"                                _ => {","highlight_start":1,"highlight_end":39},{"text":"                                    let _ = map.next_value::<de::IgnoredAny>()?;","highlight_start":1,"highlight_end":81},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Ok(config)","highlight_start":1,"highlight_end":35},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                deserializer.deserialize_map(ConfigVisitor)","highlight_start":1,"highlight_end":60},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"quote!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":17600,"byte_end":17618,"line_start":500,"line_end":500,"column_start":5,"column_end":23,"is_primary":false,"text":[{"text":"    macro_rules! quote {","highlight_start":5,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_each_token!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":29528,"byte_end":29557,"line_start":829,"line_end":829,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"macro_rules! quote_each_token {","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_tokens_with_context!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":30486,"byte_end":30524,"line_start":863,"line_end":863,"column_start":1,"column_end":39,"is_primary":false,"text":[{"text":"macro_rules! quote_tokens_with_context {","highlight_start":1,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_token_with_context!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":31280,"byte_end":31317,"line_start":893,"line_end":893,"column_start":1,"column_end":38,"is_primary":false,"text":[{"text":"macro_rules! quote_token_with_context {","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_token!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":37501,"byte_end":37525,"line_start":1024,"line_end":1024,"column_start":1,"column_end":25,"is_primary":false,"text":[{"text":"macro_rules! quote_token {","highlight_start":1,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":17600,"byte_end":17618,"line_start":500,"line_end":500,"column_start":5,"column_end":23,"is_primary":false,"text":[{"text":"    macro_rules! quote {","highlight_start":5,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_each_token!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":29528,"byte_end":29557,"line_start":829,"line_end":829,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"macro_rules! quote_each_token {","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_tokens_with_context!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":30486,"byte_end":30524,"line_start":863,"line_end":863,"column_start":1,"column_end":39,"is_primary":false,"text":[{"text":"macro_rules! quote_tokens_with_context {","highlight_start":1,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_token_with_context!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":31280,"byte_end":31317,"line_start":893,"line_end":893,"column_start":1,"column_end":38,"is_primary":false,"text":[{"text":"macro_rules! quote_token_with_context {","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_token!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":37501,"byte_end":37525,"line_start":1024,"line_end":1024,"column_start":1,"column_end":25,"is_primary":false,"text":[{"text":"macro_rules! quote_token {","highlight_start":1,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_token!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":37501,"byte_end":37525,"line_start":1024,"line_end":1024,"column_start":1,"column_end":25,"is_primary":false,"text":[{"text":"macro_rules! quote_token {","highlight_start":1,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":17600,"byte_end":17618,"line_start":500,"line_end":500,"column_start":5,"column_end":23,"is_primary":false,"text":[{"text":"    macro_rules! quote {","highlight_start":5,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_each_token!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":29528,"byte_end":29557,"line_start":829,"line_end":829,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"macro_rules! quote_each_token {","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_tokens_with_context!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":30486,"byte_end":30524,"line_start":863,"line_end":863,"column_start":1,"column_end":39,"is_primary":false,"text":[{"text":"macro_rules! quote_tokens_with_context {","highlight_start":1,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_token_with_context!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":31280,"byte_end":31317,"line_start":893,"line_end":893,"column_start":1,"column_end":38,"is_primary":false,"text":[{"text":"macro_rules! quote_token_with_context {","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_each_token!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":29528,"byte_end":29557,"line_start":829,"line_end":829,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"macro_rules! quote_each_token {","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_tokens_with_context!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":30486,"byte_end":30524,"line_start":863,"line_end":863,"column_start":1,"column_end":39,"is_primary":false,"text":[{"text":"macro_rules! quote_tokens_with_context {","highlight_start":1,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_token_with_context!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":31280,"byte_end":31317,"line_start":893,"line_end":893,"column_start":1,"column_end":38,"is_primary":false,"text":[{"text":"macro_rules! quote_token_with_context {","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_token!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":37501,"byte_end":37525,"line_start":1024,"line_end":1024,"column_start":1,"column_end":25,"is_primary":false,"text":[{"text":"macro_rules! quote_token {","highlight_start":1,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":17600,"byte_end":17618,"line_start":500,"line_end":500,"column_start":5,"column_end":23,"is_primary":false,"text":[{"text":"    macro_rules! quote {","highlight_start":5,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_each_token!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":29528,"byte_end":29557,"line_start":829,"line_end":829,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"macro_rules! quote_each_token {","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_tokens_with_context!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":30486,"byte_end":30524,"line_start":863,"line_end":863,"column_start":1,"column_end":39,"is_primary":false,"text":[{"text":"macro_rules! quote_tokens_with_context {","highlight_start":1,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_token_with_context!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":31280,"byte_end":31317,"line_start":893,"line_end":893,"column_start":1,"column_end":38,"is_primary":false,"text":[{"text":"macro_rules! quote_token_with_context {","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `ToTokens`:\n  &'a T\n  &'a mut T\n  Abstract\n  AndAnd\n  AndEq\n  AngleBracketedGenericArguments\n  Arm\n  As\nand 306 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&Vec<Attribute>` to implement `ToTokens`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"2 redundant requirements hidden","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `RepInterp<&&Vec<Attribute>>` to implement `ToTokens`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: the trait bound `Vec<Attribute>: ToTokens` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mcrates\\genies_derive\\src\\lib.rs:70:20\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m70\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    let expanded = quote! {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m____________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m71\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        impl #name {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m72\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            /// Validate the configuration\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m73\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            pub fn validate(&self) -> Result<(), ConfigError> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m460\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m461\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    };\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_____\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `ToTokens` is not implemented for `Vec<Attribute>`, which is required by `RepInterp<&&Vec<Attribute>>: ToTokens`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: the following other types implement trait `ToTokens`:\u001b[0m\n\u001b[0m              &'a T\u001b[0m\n\u001b[0m              &'a mut T\u001b[0m\n\u001b[0m              Abstract\u001b[0m\n\u001b[0m              AndAnd\u001b[0m\n\u001b[0m              AndEq\u001b[0m\n\u001b[0m              AngleBracketedGenericArguments\u001b[0m\n\u001b[0m              Arm\u001b[0m\n\u001b[0m              As\u001b[0m\n\u001b[0m            and 306 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: required for `&Vec<Attribute>` to implement `ToTokens`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: 2 redundant requirements hidden\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: required for `RepInterp<&&Vec<Attribute>>` to implement `ToTokens`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `$crate::quote_token_with_context` which comes from the expansion of the macro `quote` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Vec<&Option<proc_macro2::Ident>>: ToTokens` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":34208,"byte_end":34213,"line_start":951,"line_end":951,"column_start":37,"column_end":42,"is_primary":true,"text":[{"text":"        $crate::ToTokens::to_tokens(&$var, &mut $tokens);","highlight_start":37,"highlight_end":42}],"label":"the trait `ToTokens` is not implemented for `Vec<&Option<proc_macro2::Ident>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":30697,"byte_end":30769,"line_start":870,"line_end":870,"column_start":13,"column_end":85,"is_primary":false,"text":[{"text":"            $crate::quote_token_with_context!{$tokens $b3 $b2 $b1 $curr $a1 $a2 $a3}","highlight_start":13,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":29605,"byte_end":29904,"line_start":831,"line_end":839,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        $crate::quote_tokens_with_context!{$tokens","highlight_start":9,"highlight_end":51},{"text":"            (@ @ @ @ @ @ $($tts)*)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ @ $($tts)* @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ $($tts)* @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ $(($tts))* @ @ @)","highlight_start":1,"highlight_end":37},{"text":"            (@ @ $($tts)* @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ $($tts)* @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            ($($tts)* @ @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":18514,"byte_end":18551,"line_start":528,"line_end":528,"column_start":13,"column_end":50,"is_primary":false,"text":[{"text":"            $crate::quote_each_token!{_s $($tt)*}","highlight_start":13,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":37912,"byte_end":37938,"line_start":1037,"line_end":1037,"column_start":13,"column_end":39,"is_primary":false,"text":[{"text":"            $crate::quote!($($inner)*),","highlight_start":13,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":34489,"byte_end":34524,"line_start":958,"line_end":958,"column_start":9,"column_end":44,"is_primary":false,"text":[{"text":"        $crate::quote_token!{$curr $tokens}","highlight_start":9,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":30697,"byte_end":30769,"line_start":870,"line_end":870,"column_start":13,"column_end":85,"is_primary":false,"text":[{"text":"            $crate::quote_token_with_context!{$tokens $b3 $b2 $b1 $curr $a1 $a2 $a3}","highlight_start":13,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":29605,"byte_end":29904,"line_start":831,"line_end":839,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        $crate::quote_tokens_with_context!{$tokens","highlight_start":9,"highlight_end":51},{"text":"            (@ @ @ @ @ @ $($tts)*)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ @ $($tts)* @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ $($tts)* @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ $(($tts))* @ @ @)","highlight_start":1,"highlight_end":37},{"text":"            (@ @ $($tts)* @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ $($tts)* @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            ($($tts)* @ @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":18514,"byte_end":18551,"line_start":528,"line_end":528,"column_start":13,"column_end":50,"is_primary":false,"text":[{"text":"            $crate::quote_each_token!{_s $($tt)*}","highlight_start":13,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":38346,"byte_end":38372,"line_start":1053,"line_end":1053,"column_start":13,"column_end":39,"is_primary":false,"text":[{"text":"            $crate::quote!($($inner)*),","highlight_start":13,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":34489,"byte_end":34524,"line_start":958,"line_end":958,"column_start":9,"column_end":44,"is_primary":false,"text":[{"text":"        $crate::quote_token!{$curr $tokens}","highlight_start":9,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":30697,"byte_end":30769,"line_start":870,"line_end":870,"column_start":13,"column_end":85,"is_primary":false,"text":[{"text":"            $crate::quote_token_with_context!{$tokens $b3 $b2 $b1 $curr $a1 $a2 $a3}","highlight_start":13,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":29605,"byte_end":29904,"line_start":831,"line_end":839,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        $crate::quote_tokens_with_context!{$tokens","highlight_start":9,"highlight_end":51},{"text":"            (@ @ @ @ @ @ $($tts)*)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ @ $($tts)* @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ $($tts)* @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ $(($tts))* @ @ @)","highlight_start":1,"highlight_end":37},{"text":"            (@ @ $($tts)* @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ $($tts)* @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            ($($tts)* @ @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":18514,"byte_end":18551,"line_start":528,"line_end":528,"column_start":13,"column_end":50,"is_primary":false,"text":[{"text":"            $crate::quote_each_token!{_s $($tt)*}","highlight_start":13,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":38346,"byte_end":38372,"line_start":1053,"line_end":1053,"column_start":13,"column_end":39,"is_primary":false,"text":[{"text":"            $crate::quote!($($inner)*),","highlight_start":13,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":34489,"byte_end":34524,"line_start":958,"line_end":958,"column_start":9,"column_end":44,"is_primary":false,"text":[{"text":"        $crate::quote_token!{$curr $tokens}","highlight_start":9,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":30697,"byte_end":30769,"line_start":870,"line_end":870,"column_start":13,"column_end":85,"is_primary":false,"text":[{"text":"            $crate::quote_token_with_context!{$tokens $b3 $b2 $b1 $curr $a1 $a2 $a3}","highlight_start":13,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":29605,"byte_end":29904,"line_start":831,"line_end":839,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        $crate::quote_tokens_with_context!{$tokens","highlight_start":9,"highlight_end":51},{"text":"            (@ @ @ @ @ @ $($tts)*)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ @ $($tts)* @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ $($tts)* @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ $(($tts))* @ @ @)","highlight_start":1,"highlight_end":37},{"text":"            (@ @ $($tts)* @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ $($tts)* @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            ($($tts)* @ @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":18514,"byte_end":18551,"line_start":528,"line_end":528,"column_start":13,"column_end":50,"is_primary":false,"text":[{"text":"            $crate::quote_each_token!{_s $($tt)*}","highlight_start":13,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"crates\\genies_derive\\src\\lib.rs","byte_start":2221,"byte_end":19604,"line_start":70,"line_end":461,"column_start":20,"column_end":6,"is_primary":false,"text":[{"text":"    let expanded = quote! {","highlight_start":20,"highlight_end":28},{"text":"        impl #name {","highlight_start":1,"highlight_end":21},{"text":"            /// Validate the configuration","highlight_start":1,"highlight_end":43},{"text":"            pub fn validate(&self) -> Result<(), ConfigError> {","highlight_start":1,"highlight_end":64},{"text":"                #(","highlight_start":1,"highlight_end":19},{"text":"                    if let Err(e) = self.validate_field(stringify!(#field_names), &self.#field_names) {","highlight_start":1,"highlight_end":104},{"text":"                        return Err(e);","highlight_start":1,"highlight_end":39},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                )*","highlight_start":1,"highlight_end":19},{"text":"                Ok(())","highlight_start":1,"highlight_end":23},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            /// Load configuration from a YAML file","highlight_start":1,"highlight_end":52},{"text":"            pub fn from_file(path: &str) -> Result<Self, ConfigError> {","highlight_start":1,"highlight_end":72},{"text":"                let contents = std::fs::read_to_string(path)","highlight_start":1,"highlight_end":61},{"text":"                    .map_err(|e| ConfigError::FileError(format!(\"Failed to read config file: {}\", e)))?;","highlight_start":1,"highlight_end":105},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                serde_yaml::from_str(&contents)","highlight_start":1,"highlight_end":48},{"text":"                    .map_err(|e| ConfigError::ParseError(format!(\"Failed to parse config file: {}\", e)))","highlight_start":1,"highlight_end":105},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            /// Load configuration from multiple sources in order of priority:","highlight_start":1,"highlight_end":79},{"text":"            /// 1. Load from file (base configuration)","highlight_start":1,"highlight_end":55},{"text":"            /// 2. Override with environment variables (higher priority)","highlight_start":1,"highlight_end":73},{"text":"            pub fn from_sources(file_path: &str) -> Result<Self, ConfigError> {","highlight_start":1,"highlight_end":80},{"text":"                // First load from file","highlight_start":1,"highlight_end":40},{"text":"                let mut config = match Self::from_file(file_path) {","highlight_start":1,"highlight_end":68},{"text":"                    Ok(cfg) => cfg,","highlight_start":1,"highlight_end":36},{"text":"                    Err(e) => {","highlight_start":1,"highlight_end":32},{"text":"                        log::warn!(\"Failed to load config from file: {}, using defaults\", e);","highlight_start":1,"highlight_end":94},{"text":"                        Self::default()","highlight_start":1,"highlight_end":40},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                // Then override with environment variables","highlight_start":1,"highlight_end":60},{"text":"                if let Err(e) = config.load_env() {","highlight_start":1,"highlight_end":52},{"text":"                    log::warn!(\"Failed to load config from environment: {}\", e);","highlight_start":1,"highlight_end":81},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                // Validate the final configuration","highlight_start":1,"highlight_end":52},{"text":"                config.validate()?;","highlight_start":1,"highlight_end":36},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                Ok(config)","highlight_start":1,"highlight_end":27},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            /// Merge with another configuration","highlight_start":1,"highlight_end":49},{"text":"            pub fn merge(&mut self, other: Self) {","highlight_start":1,"highlight_end":51},{"text":"                #(","highlight_start":1,"highlight_end":19},{"text":"                    self.#field_names = other.#field_names;","highlight_start":1,"highlight_end":60},{"text":"                )*","highlight_start":1,"highlight_end":19},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            /// Parse a string into a value of type T","highlight_start":1,"highlight_end":54},{"text":"            fn parse_value<T: FromStr>(value: &str) -> Result<T, ConfigError>","highlight_start":1,"highlight_end":78},{"text":"            where","highlight_start":1,"highlight_end":18},{"text":"                T::Err: std::fmt::Display,","highlight_start":1,"highlight_end":43},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                value.parse()","highlight_start":1,"highlight_end":30},{"text":"                    .map_err(|e| ConfigError::ParseError(format!(\"Failed to parse value '{}': {}\", value, e)))","highlight_start":1,"highlight_end":111},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            /// Parse a comma-separated string into a Vec<T>","highlight_start":1,"highlight_end":61},{"text":"            fn parse_array<T: FromStr>(value: &str) -> Result<Vec<T>, ConfigError>","highlight_start":1,"highlight_end":83},{"text":"            where","highlight_start":1,"highlight_end":18},{"text":"                T::Err: std::fmt::Display,","highlight_start":1,"highlight_end":43},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                value.split(',')","highlight_start":1,"highlight_end":33},{"text":"                    .map(|s| s.trim())","highlight_start":1,"highlight_end":39},{"text":"                    .filter(|s| !s.is_empty())","highlight_start":1,"highlight_end":47},{"text":"                    .map(|s| Self::parse_value::<T>(s))","highlight_start":1,"highlight_end":56},{"text":"                    .collect()","highlight_start":1,"highlight_end":31},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            /// Check if a type is Option<T>","highlight_start":1,"highlight_end":45},{"text":"            fn is_option_type(type_str: &str) -> bool {","highlight_start":1,"highlight_end":56},{"text":"                type_str.starts_with(\"Option < \")","highlight_start":1,"highlight_end":50},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            /// Extract inner type from Option<T>","highlight_start":1,"highlight_end":50},{"text":"            fn get_inner_type(type_str: &str) -> &str {","highlight_start":1,"highlight_end":56},{"text":"                if type_str.starts_with(\"Option < \") {","highlight_start":1,"highlight_end":55},{"text":"                    let start = \"Option < \".len();","highlight_start":1,"highlight_end":51},{"text":"                    let end = type_str.len() - 2; // Remove trailing \" >\"","highlight_start":1,"highlight_end":74},{"text":"                    &type_str[start..end]","highlight_start":1,"highlight_end":42},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    type_str","highlight_start":1,"highlight_end":29},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            /// Parse a string into an Option<T>","highlight_start":1,"highlight_end":49},{"text":"            fn parse_option<T: FromStr>(value: &str) -> Result<Option<T>, ConfigError>","highlight_start":1,"highlight_end":87},{"text":"            where","highlight_start":1,"highlight_end":18},{"text":"                T::Err: std::fmt::Display,","highlight_start":1,"highlight_end":43},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                if value.trim().is_empty() {","highlight_start":1,"highlight_end":45},{"text":"                    Ok(None)","highlight_start":1,"highlight_end":29},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    Ok(Some(Self::parse_value(value)?))","highlight_start":1,"highlight_end":56},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            /// Parse a string into a value based on its type","highlight_start":1,"highlight_end":62},{"text":"            fn parse_type(type_str: &str, value: &str) -> Result<Box<dyn std::any::Any>, ConfigError> {","highlight_start":1,"highlight_end":104},{"text":"                let inner_type = Self::get_inner_type(type_str);","highlight_start":1,"highlight_end":65},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                let result: Box<dyn std::any::Any> = match inner_type {","highlight_start":1,"highlight_end":72},{"text":"                    \"String\" => if Self::is_option_type(type_str) {","highlight_start":1,"highlight_end":68},{"text":"                        Box::new(Self::parse_option::<String>(value)?)","highlight_start":1,"highlight_end":71},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Box::new(Self::parse_value::<String>(value)?)","highlight_start":1,"highlight_end":70},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"i32\" => if Self::is_option_type(type_str) {","highlight_start":1,"highlight_end":65},{"text":"                        Box::new(Self::parse_option::<i32>(value)?)","highlight_start":1,"highlight_end":68},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Box::new(Self::parse_value::<i32>(value)?)","highlight_start":1,"highlight_end":67},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"i64\" => if Self::is_option_type(type_str) {","highlight_start":1,"highlight_end":65},{"text":"                        Box::new(Self::parse_option::<i64>(value)?)","highlight_start":1,"highlight_end":68},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Box::new(Self::parse_value::<i64>(value)?)","highlight_start":1,"highlight_end":67},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"u32\" => if Self::is_option_type(type_str) {","highlight_start":1,"highlight_end":65},{"text":"                        Box::new(Self::parse_option::<u32>(value)?)","highlight_start":1,"highlight_end":68},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Box::new(Self::parse_value::<u32>(value)?)","highlight_start":1,"highlight_end":67},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"u64\" => if Self::is_option_type(type_str) {","highlight_start":1,"highlight_end":65},{"text":"                        Box::new(Self::parse_option::<u64>(value)?)","highlight_start":1,"highlight_end":68},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Box::new(Self::parse_value::<u64>(value)?)","highlight_start":1,"highlight_end":67},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"f32\" => if Self::is_option_type(type_str) {","highlight_start":1,"highlight_end":65},{"text":"                        Box::new(Self::parse_option::<f32>(value)?)","highlight_start":1,"highlight_end":68},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Box::new(Self::parse_value::<f32>(value)?)","highlight_start":1,"highlight_end":67},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"f64\" => if Self::is_option_type(type_str) {","highlight_start":1,"highlight_end":65},{"text":"                        Box::new(Self::parse_option::<f64>(value)?)","highlight_start":1,"highlight_end":68},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Box::new(Self::parse_value::<f64>(value)?)","highlight_start":1,"highlight_end":67},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"bool\" => if Self::is_option_type(type_str) {","highlight_start":1,"highlight_end":66},{"text":"                        Box::new(Self::parse_option::<bool>(value)?)","highlight_start":1,"highlight_end":69},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Box::new(Self::parse_value::<bool>(value)?)","highlight_start":1,"highlight_end":68},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    _ => if type_str.starts_with(\"Vec < \") {","highlight_start":1,"highlight_end":61},{"text":"                        // Handle array types","highlight_start":1,"highlight_end":46},{"text":"                        let element_type = type_str.trim_start_matches(\"Vec < \").trim_end_matches(\" >\");","highlight_start":1,"highlight_end":105},{"text":"                        match element_type {","highlight_start":1,"highlight_end":45},{"text":"                            \"String\" => Box::new(Self::parse_array::<String>(value)?),","highlight_start":1,"highlight_end":87},{"text":"                            \"i32\" => Box::new(Self::parse_array::<i32>(value)?),","highlight_start":1,"highlight_end":81},{"text":"                            \"i64\" => Box::new(Self::parse_array::<i64>(value)?),","highlight_start":1,"highlight_end":81},{"text":"                            \"u32\" => Box::new(Self::parse_array::<u32>(value)?),","highlight_start":1,"highlight_end":81},{"text":"                            \"u64\" => Box::new(Self::parse_array::<u64>(value)?),","highlight_start":1,"highlight_end":81},{"text":"                            \"f32\" => Box::new(Self::parse_array::<f32>(value)?),","highlight_start":1,"highlight_end":81},{"text":"                            \"f64\" => Box::new(Self::parse_array::<f64>(value)?),","highlight_start":1,"highlight_end":81},{"text":"                            \"bool\" => Box::new(Self::parse_array::<bool>(value)?),","highlight_start":1,"highlight_end":83},{"text":"                            _ => return Err(ConfigError::ParseError(","highlight_start":1,"highlight_end":69},{"text":"                                format!(\"Unsupported array element type: {}\", element_type)","highlight_start":1,"highlight_end":92},{"text":"                            )),","highlight_start":1,"highlight_end":32},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        return Err(ConfigError::ParseError(","highlight_start":1,"highlight_end":60},{"text":"                            format!(\"Unsupported type: {}\", type_str)","highlight_start":1,"highlight_end":70},{"text":"                        ));","highlight_start":1,"highlight_end":28},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                Ok(result)","highlight_start":1,"highlight_end":27},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            /// Load configuration from environment variables, overriding existing values","highlight_start":1,"highlight_end":90},{"text":"            pub fn load_env(&mut self) -> Result<(), ConfigError> {","highlight_start":1,"highlight_end":68},{"text":"                #(","highlight_start":1,"highlight_end":19},{"text":"                    if let Ok(value) = std::env::var(#field_env_names) {","highlight_start":1,"highlight_end":73},{"text":"                        let field_type = stringify!(#field_types);","highlight_start":1,"highlight_end":67},{"text":"                        let parsed_value = Self::parse_type(field_type, &value)?;","highlight_start":1,"highlight_end":82},{"text":"                        ","highlight_start":1,"highlight_end":25},{"text":"                        // Downcast to the correct type","highlight_start":1,"highlight_end":56},{"text":"                        if let Some(v) = parsed_value.downcast_ref() {","highlight_start":1,"highlight_end":71},{"text":"                            self.#field_names = v.clone();","highlight_start":1,"highlight_end":59},{"text":"                        } else {","highlight_start":1,"highlight_end":33},{"text":"                            return Err(ConfigError::ParseError(","highlight_start":1,"highlight_end":64},{"text":"                                format!(\"Type mismatch for field {}\", stringify!(#field_names))","highlight_start":1,"highlight_end":96},{"text":"                            ));","highlight_start":1,"highlight_end":32},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    } else if Self::is_option_type(stringify!(#field_types)) {","highlight_start":1,"highlight_end":79},{"text":"                        // For Option types, set to None if environment variable is not present","highlight_start":1,"highlight_end":96},{"text":"                        self.#field_names = None;","highlight_start":1,"highlight_end":50},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                )*","highlight_start":1,"highlight_end":19},{"text":"                Ok(())","highlight_start":1,"highlight_end":23},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            /// Create a new builder","highlight_start":1,"highlight_end":37},{"text":"            pub fn builder() -> #name Builder {","highlight_start":1,"highlight_end":48},{"text":"                #name Builder::default()","highlight_start":1,"highlight_end":41},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // Private validation helper","highlight_start":1,"highlight_end":41},{"text":"            fn validate_field<T>(&self, field_name: &str, value: &T) -> Result<(), ConfigError> {","highlight_start":1,"highlight_end":98},{"text":"                // Add field-specific validation based on attributes","highlight_start":1,"highlight_end":69},{"text":"                #(","highlight_start":1,"highlight_end":19},{"text":"                    if field_name == stringify!(#field_names) {","highlight_start":1,"highlight_end":64},{"text":"                        for attr in #field_attrs {","highlight_start":1,"highlight_end":51},{"text":"                            if attr.path().is_ident(\"config\") {","highlight_start":1,"highlight_end":64},{"text":"                                if let Ok(meta) = attr.parse_nested_meta(|meta| {","highlight_start":1,"highlight_end":82},{"text":"                                    if meta.path.is_ident(\"validate\") {","highlight_start":1,"highlight_end":72},{"text":"                                        // Parse validation rules","highlight_start":1,"highlight_end":66},{"text":"                                        meta.parse_nested_meta(|nested| {","highlight_start":1,"highlight_end":74},{"text":"                                            if nested.path.is_ident(\"range\") {","highlight_start":1,"highlight_end":79},{"text":"                                                // Handle range validation","highlight_start":1,"highlight_end":75},{"text":"                                                let min = nested.value()?.parse_nested_meta(|m| {","highlight_start":1,"highlight_end":98},{"text":"                                                    if m.path.is_ident(\"min\") {","highlight_start":1,"highlight_end":80},{"text":"                                                        Ok(m.value()?.parse()?)","highlight_start":1,"highlight_end":80},{"text":"                                                    } else {","highlight_start":1,"highlight_end":61},{"text":"                                                        Ok(std::u64::MIN)","highlight_start":1,"highlight_end":74},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                })?;","highlight_start":1,"highlight_end":53},{"text":"                                                let max = nested.value()?.parse_nested_meta(|m| {","highlight_start":1,"highlight_end":98},{"text":"                                                    if m.path.is_ident(\"max\") {","highlight_start":1,"highlight_end":80},{"text":"                                                        Ok(m.value()?.parse()?)","highlight_start":1,"highlight_end":80},{"text":"                                                    } else {","highlight_start":1,"highlight_end":61},{"text":"                                                        Ok(std::u64::MAX)","highlight_start":1,"highlight_end":74},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                })?;","highlight_start":1,"highlight_end":53},{"text":"                                                ","highlight_start":1,"highlight_end":49},{"text":"                                                // Perform range validation","highlight_start":1,"highlight_end":76},{"text":"                                                let value = value.to_string().parse::<u64>()","highlight_start":1,"highlight_end":93},{"text":"                                                    .map_err(|_| ConfigError::ValidationError(","highlight_start":1,"highlight_end":95},{"text":"                                                        format!(\"Invalid value for {}\", field_name)","highlight_start":1,"highlight_end":100},{"text":"                                                    ))?;","highlight_start":1,"highlight_end":57},{"text":"                                                if value < min || value > max {","highlight_start":1,"highlight_end":80},{"text":"                                                    return Err(ConfigError::ValidationError(","highlight_start":1,"highlight_end":93},{"text":"                                                        format!(\"{} must be between {} and {}\", field_name, min, max)","highlight_start":1,"highlight_end":118},{"text":"                                                    ));","highlight_start":1,"highlight_end":56},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                            }","highlight_start":1,"highlight_end":46},{"text":"                                            Ok(())","highlight_start":1,"highlight_end":51},{"text":"                                        })?;","highlight_start":1,"highlight_end":45},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                    Ok(())","highlight_start":1,"highlight_end":43},{"text":"                                }) {","highlight_start":1,"highlight_end":37},{"text":"                                    if let Err(e) = meta {","highlight_start":1,"highlight_end":59},{"text":"                                        return Err(ConfigError::ValidationError(e.to_string()));","highlight_start":1,"highlight_end":97},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                )*","highlight_start":1,"highlight_end":19},{"text":"                Ok(())","highlight_start":1,"highlight_end":23},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            /// Convert configuration to a different type","highlight_start":1,"highlight_end":58},{"text":"            pub fn convert<T: TryFrom<Self>>(&self) -> Result<T, ConfigError> {","highlight_start":1,"highlight_end":80},{"text":"                T::try_from(self.clone())","highlight_start":1,"highlight_end":42},{"text":"                    .map_err(|_| ConfigError::ConversionError(","highlight_start":1,"highlight_end":63},{"text":"                        format!(\"Failed to convert {} to target type\", stringify!(#name))","highlight_start":1,"highlight_end":90},{"text":"                    ))","highlight_start":1,"highlight_end":23},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        /// Builder for #name","highlight_start":1,"highlight_end":30},{"text":"        #[derive(Default)]","highlight_start":1,"highlight_end":27},{"text":"        pub struct #name Builder {","highlight_start":1,"highlight_end":35},{"text":"            #(","highlight_start":1,"highlight_end":15},{"text":"                #field_names: #builder_field_types,","highlight_start":1,"highlight_end":52},{"text":"            )*","highlight_start":1,"highlight_end":15},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl #name Builder {","highlight_start":1,"highlight_end":29},{"text":"            #(","highlight_start":1,"highlight_end":15},{"text":"                pub fn #field_names(mut self, value: #field_types) -> Self {","highlight_start":1,"highlight_end":77},{"text":"                    self.#field_names = Some(value);","highlight_start":1,"highlight_end":53},{"text":"                    self","highlight_start":1,"highlight_end":25},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            )*","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            pub fn build(self) -> Result<#name, ConfigError> {","highlight_start":1,"highlight_end":63},{"text":"                Ok(#name {","highlight_start":1,"highlight_end":27},{"text":"                    #(","highlight_start":1,"highlight_end":23},{"text":"                        #field_names: self.#field_names.ok_or_else(|| {","highlight_start":1,"highlight_end":72},{"text":"                            ConfigError::BuildError(format!(\"Missing required field: {}\", stringify!(#field_names)))","highlight_start":1,"highlight_end":117},{"text":"                        })?,","highlight_start":1,"highlight_end":29},{"text":"                    )*","highlight_start":1,"highlight_end":23},{"text":"                })","highlight_start":1,"highlight_end":19},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl Default for #name {","highlight_start":1,"highlight_end":33},{"text":"            fn default() -> Self {","highlight_start":1,"highlight_end":35},{"text":"                Self {","highlight_start":1,"highlight_end":23},{"text":"                    #(","highlight_start":1,"highlight_end":23},{"text":"                        #field_names: {","highlight_start":1,"highlight_end":40},{"text":"                            let mut default_value = None;","highlight_start":1,"highlight_end":58},{"text":"                            for attr in #field_attrs {","highlight_start":1,"highlight_end":55},{"text":"                                if attr.path().is_ident(\"config\") {","highlight_start":1,"highlight_end":68},{"text":"                                    if let Ok(meta) = attr.parse_nested_meta(|meta| {","highlight_start":1,"highlight_end":86},{"text":"                                        if meta.path.is_ident(\"default\") {","highlight_start":1,"highlight_end":75},{"text":"                                            default_value = Some(meta.value()?.parse()?);","highlight_start":1,"highlight_end":90},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                        Ok(())","highlight_start":1,"highlight_end":47},{"text":"                                    }) {","highlight_start":1,"highlight_end":41},{"text":"                                        if let Some(value) = default_value {","highlight_start":1,"highlight_end":77},{"text":"                                            return value;","highlight_start":1,"highlight_end":58},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            Default::default()","highlight_start":1,"highlight_end":47},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                    )*","highlight_start":1,"highlight_end":23},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[async_trait::async_trait]","highlight_start":1,"highlight_end":36},{"text":"        impl ConfigReload for #name {","highlight_start":1,"highlight_end":38},{"text":"            async fn reload(&mut self) -> Result<(), ConfigError> {","highlight_start":1,"highlight_end":68},{"text":"                // Try loading from file first","highlight_start":1,"highlight_end":47},{"text":"                if let Ok(new_config) = Self::from_file(\"config.yml\") {","highlight_start":1,"highlight_end":72},{"text":"                    *self = new_config;","highlight_start":1,"highlight_end":40},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                // Then override with environment variables","highlight_start":1,"highlight_end":60},{"text":"                self.load_env()?;","highlight_start":1,"highlight_end":34},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                // Validate after reload","highlight_start":1,"highlight_end":41},{"text":"                self.validate()?;","highlight_start":1,"highlight_end":34},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                Ok(())","highlight_start":1,"highlight_end":23},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // Implement serialization traits","highlight_start":1,"highlight_end":42},{"text":"        impl serde::Serialize for #name {","highlight_start":1,"highlight_end":42},{"text":"            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>","highlight_start":1,"highlight_end":77},{"text":"            where","highlight_start":1,"highlight_end":18},{"text":"                S: serde::Serializer,","highlight_start":1,"highlight_end":38},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use serde::ser::SerializeStruct;","highlight_start":1,"highlight_end":49},{"text":"                let mut state = serializer.serialize_struct(stringify!(#name), #field_names.len())?;","highlight_start":1,"highlight_end":101},{"text":"                #(","highlight_start":1,"highlight_end":19},{"text":"                    state.serialize_field(stringify!(#field_names), &self.#field_names)?;","highlight_start":1,"highlight_end":90},{"text":"                )*","highlight_start":1,"highlight_end":19},{"text":"                state.end()","highlight_start":1,"highlight_end":28},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<'de> serde::Deserialize<'de> for #name {","highlight_start":1,"highlight_end":54},{"text":"            fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>","highlight_start":1,"highlight_end":73},{"text":"            where","highlight_start":1,"highlight_end":18},{"text":"                D: serde::Deserializer<'de>,","highlight_start":1,"highlight_end":45},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use serde::de::{self, Visitor};","highlight_start":1,"highlight_end":48},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                struct ConfigVisitor;","highlight_start":1,"highlight_end":38},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                impl<'de> Visitor<'de> for ConfigVisitor {","highlight_start":1,"highlight_end":59},{"text":"                    type Value = #name;","highlight_start":1,"highlight_end":40},{"text":"                    ","highlight_start":1,"highlight_end":21},{"text":"                    fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {","highlight_start":1,"highlight_end":99},{"text":"                        formatter.write_str(concat!(\"struct \", stringify!(#name)))","highlight_start":1,"highlight_end":83},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    ","highlight_start":1,"highlight_end":21},{"text":"                    fn visit_map<V>(self, mut map: V) -> Result<#name, V::Error>","highlight_start":1,"highlight_end":81},{"text":"                    where","highlight_start":1,"highlight_end":26},{"text":"                        V: de::MapAccess<'de>,","highlight_start":1,"highlight_end":47},{"text":"                    {","highlight_start":1,"highlight_end":22},{"text":"                        let mut config = #name::default();","highlight_start":1,"highlight_end":59},{"text":"                        while let Some(key) = map.next_key()? {","highlight_start":1,"highlight_end":64},{"text":"                            match key {","highlight_start":1,"highlight_end":40},{"text":"                                #(","highlight_start":1,"highlight_end":35},{"text":"                                    stringify!(#field_names) => {","highlight_start":1,"highlight_end":66},{"text":"                                        config.#field_names = map.next_value()?;","highlight_start":1,"highlight_end":81},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                )*","highlight_start":1,"highlight_end":35},{"text":"                                _ => {","highlight_start":1,"highlight_end":39},{"text":"                                    let _ = map.next_value::<de::IgnoredAny>()?;","highlight_start":1,"highlight_end":81},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Ok(config)","highlight_start":1,"highlight_end":35},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                deserializer.deserialize_map(ConfigVisitor)","highlight_start":1,"highlight_end":60},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"quote!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":17600,"byte_end":17618,"line_start":500,"line_end":500,"column_start":5,"column_end":23,"is_primary":false,"text":[{"text":"    macro_rules! quote {","highlight_start":5,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_each_token!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":29528,"byte_end":29557,"line_start":829,"line_end":829,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"macro_rules! quote_each_token {","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_tokens_with_context!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":30486,"byte_end":30524,"line_start":863,"line_end":863,"column_start":1,"column_end":39,"is_primary":false,"text":[{"text":"macro_rules! quote_tokens_with_context {","highlight_start":1,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_token_with_context!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":31280,"byte_end":31317,"line_start":893,"line_end":893,"column_start":1,"column_end":38,"is_primary":false,"text":[{"text":"macro_rules! quote_token_with_context {","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_token!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":37501,"byte_end":37525,"line_start":1024,"line_end":1024,"column_start":1,"column_end":25,"is_primary":false,"text":[{"text":"macro_rules! quote_token {","highlight_start":1,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":17600,"byte_end":17618,"line_start":500,"line_end":500,"column_start":5,"column_end":23,"is_primary":false,"text":[{"text":"    macro_rules! quote {","highlight_start":5,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_each_token!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":29528,"byte_end":29557,"line_start":829,"line_end":829,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"macro_rules! quote_each_token {","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_tokens_with_context!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":30486,"byte_end":30524,"line_start":863,"line_end":863,"column_start":1,"column_end":39,"is_primary":false,"text":[{"text":"macro_rules! quote_tokens_with_context {","highlight_start":1,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_token_with_context!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":31280,"byte_end":31317,"line_start":893,"line_end":893,"column_start":1,"column_end":38,"is_primary":false,"text":[{"text":"macro_rules! quote_token_with_context {","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_token!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":37501,"byte_end":37525,"line_start":1024,"line_end":1024,"column_start":1,"column_end":25,"is_primary":false,"text":[{"text":"macro_rules! quote_token {","highlight_start":1,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":17600,"byte_end":17618,"line_start":500,"line_end":500,"column_start":5,"column_end":23,"is_primary":false,"text":[{"text":"    macro_rules! quote {","highlight_start":5,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_each_token!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":29528,"byte_end":29557,"line_start":829,"line_end":829,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"macro_rules! quote_each_token {","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_tokens_with_context!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":30486,"byte_end":30524,"line_start":863,"line_end":863,"column_start":1,"column_end":39,"is_primary":false,"text":[{"text":"macro_rules! quote_tokens_with_context {","highlight_start":1,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_token_with_context!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":31280,"byte_end":31317,"line_start":893,"line_end":893,"column_start":1,"column_end":38,"is_primary":false,"text":[{"text":"macro_rules! quote_token_with_context {","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_token!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":37501,"byte_end":37525,"line_start":1024,"line_end":1024,"column_start":1,"column_end":25,"is_primary":false,"text":[{"text":"macro_rules! quote_token {","highlight_start":1,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":17600,"byte_end":17618,"line_start":500,"line_end":500,"column_start":5,"column_end":23,"is_primary":false,"text":[{"text":"    macro_rules! quote {","highlight_start":5,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_each_token!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":29528,"byte_end":29557,"line_start":829,"line_end":829,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"macro_rules! quote_each_token {","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_tokens_with_context!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":30486,"byte_end":30524,"line_start":863,"line_end":863,"column_start":1,"column_end":39,"is_primary":false,"text":[{"text":"macro_rules! quote_tokens_with_context {","highlight_start":1,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_token_with_context!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":31280,"byte_end":31317,"line_start":893,"line_end":893,"column_start":1,"column_end":38,"is_primary":false,"text":[{"text":"macro_rules! quote_token_with_context {","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":34180,"byte_end":34207,"line_start":951,"line_end":951,"column_start":9,"column_end":36,"is_primary":false,"text":[{"text":"        $crate::ToTokens::to_tokens(&$var, &mut $tokens);","highlight_start":9,"highlight_end":36}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":30697,"byte_end":30769,"line_start":870,"line_end":870,"column_start":13,"column_end":85,"is_primary":false,"text":[{"text":"            $crate::quote_token_with_context!{$tokens $b3 $b2 $b1 $curr $a1 $a2 $a3}","highlight_start":13,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":29605,"byte_end":29904,"line_start":831,"line_end":839,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        $crate::quote_tokens_with_context!{$tokens","highlight_start":9,"highlight_end":51},{"text":"            (@ @ @ @ @ @ $($tts)*)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ @ $($tts)* @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ $($tts)* @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ $(($tts))* @ @ @)","highlight_start":1,"highlight_end":37},{"text":"            (@ @ $($tts)* @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ $($tts)* @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            ($($tts)* @ @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":18514,"byte_end":18551,"line_start":528,"line_end":528,"column_start":13,"column_end":50,"is_primary":false,"text":[{"text":"            $crate::quote_each_token!{_s $($tt)*}","highlight_start":13,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":37912,"byte_end":37938,"line_start":1037,"line_end":1037,"column_start":13,"column_end":39,"is_primary":false,"text":[{"text":"            $crate::quote!($($inner)*),","highlight_start":13,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":34489,"byte_end":34524,"line_start":958,"line_end":958,"column_start":9,"column_end":44,"is_primary":false,"text":[{"text":"        $crate::quote_token!{$curr $tokens}","highlight_start":9,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":30697,"byte_end":30769,"line_start":870,"line_end":870,"column_start":13,"column_end":85,"is_primary":false,"text":[{"text":"            $crate::quote_token_with_context!{$tokens $b3 $b2 $b1 $curr $a1 $a2 $a3}","highlight_start":13,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":29605,"byte_end":29904,"line_start":831,"line_end":839,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        $crate::quote_tokens_with_context!{$tokens","highlight_start":9,"highlight_end":51},{"text":"            (@ @ @ @ @ @ $($tts)*)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ @ $($tts)* @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ $($tts)* @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ $(($tts))* @ @ @)","highlight_start":1,"highlight_end":37},{"text":"            (@ @ $($tts)* @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ $($tts)* @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            ($($tts)* @ @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":18514,"byte_end":18551,"line_start":528,"line_end":528,"column_start":13,"column_end":50,"is_primary":false,"text":[{"text":"            $crate::quote_each_token!{_s $($tt)*}","highlight_start":13,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":38346,"byte_end":38372,"line_start":1053,"line_end":1053,"column_start":13,"column_end":39,"is_primary":false,"text":[{"text":"            $crate::quote!($($inner)*),","highlight_start":13,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":34489,"byte_end":34524,"line_start":958,"line_end":958,"column_start":9,"column_end":44,"is_primary":false,"text":[{"text":"        $crate::quote_token!{$curr $tokens}","highlight_start":9,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":30697,"byte_end":30769,"line_start":870,"line_end":870,"column_start":13,"column_end":85,"is_primary":false,"text":[{"text":"            $crate::quote_token_with_context!{$tokens $b3 $b2 $b1 $curr $a1 $a2 $a3}","highlight_start":13,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":29605,"byte_end":29904,"line_start":831,"line_end":839,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        $crate::quote_tokens_with_context!{$tokens","highlight_start":9,"highlight_end":51},{"text":"            (@ @ @ @ @ @ $($tts)*)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ @ $($tts)* @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ $($tts)* @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ $(($tts))* @ @ @)","highlight_start":1,"highlight_end":37},{"text":"            (@ @ $($tts)* @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ $($tts)* @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            ($($tts)* @ @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":18514,"byte_end":18551,"line_start":528,"line_end":528,"column_start":13,"column_end":50,"is_primary":false,"text":[{"text":"            $crate::quote_each_token!{_s $($tt)*}","highlight_start":13,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":38346,"byte_end":38372,"line_start":1053,"line_end":1053,"column_start":13,"column_end":39,"is_primary":false,"text":[{"text":"            $crate::quote!($($inner)*),","highlight_start":13,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":34489,"byte_end":34524,"line_start":958,"line_end":958,"column_start":9,"column_end":44,"is_primary":false,"text":[{"text":"        $crate::quote_token!{$curr $tokens}","highlight_start":9,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":30697,"byte_end":30769,"line_start":870,"line_end":870,"column_start":13,"column_end":85,"is_primary":false,"text":[{"text":"            $crate::quote_token_with_context!{$tokens $b3 $b2 $b1 $curr $a1 $a2 $a3}","highlight_start":13,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":29605,"byte_end":29904,"line_start":831,"line_end":839,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        $crate::quote_tokens_with_context!{$tokens","highlight_start":9,"highlight_end":51},{"text":"            (@ @ @ @ @ @ $($tts)*)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ @ $($tts)* @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ $($tts)* @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ $(($tts))* @ @ @)","highlight_start":1,"highlight_end":37},{"text":"            (@ @ $($tts)* @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ $($tts)* @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            ($($tts)* @ @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":18514,"byte_end":18551,"line_start":528,"line_end":528,"column_start":13,"column_end":50,"is_primary":false,"text":[{"text":"            $crate::quote_each_token!{_s $($tt)*}","highlight_start":13,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"crates\\genies_derive\\src\\lib.rs","byte_start":2221,"byte_end":19604,"line_start":70,"line_end":461,"column_start":20,"column_end":6,"is_primary":false,"text":[{"text":"    let expanded = quote! {","highlight_start":20,"highlight_end":28},{"text":"        impl #name {","highlight_start":1,"highlight_end":21},{"text":"            /// Validate the configuration","highlight_start":1,"highlight_end":43},{"text":"            pub fn validate(&self) -> Result<(), ConfigError> {","highlight_start":1,"highlight_end":64},{"text":"                #(","highlight_start":1,"highlight_end":19},{"text":"                    if let Err(e) = self.validate_field(stringify!(#field_names), &self.#field_names) {","highlight_start":1,"highlight_end":104},{"text":"                        return Err(e);","highlight_start":1,"highlight_end":39},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                )*","highlight_start":1,"highlight_end":19},{"text":"                Ok(())","highlight_start":1,"highlight_end":23},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            /// Load configuration from a YAML file","highlight_start":1,"highlight_end":52},{"text":"            pub fn from_file(path: &str) -> Result<Self, ConfigError> {","highlight_start":1,"highlight_end":72},{"text":"                let contents = std::fs::read_to_string(path)","highlight_start":1,"highlight_end":61},{"text":"                    .map_err(|e| ConfigError::FileError(format!(\"Failed to read config file: {}\", e)))?;","highlight_start":1,"highlight_end":105},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                serde_yaml::from_str(&contents)","highlight_start":1,"highlight_end":48},{"text":"                    .map_err(|e| ConfigError::ParseError(format!(\"Failed to parse config file: {}\", e)))","highlight_start":1,"highlight_end":105},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            /// Load configuration from multiple sources in order of priority:","highlight_start":1,"highlight_end":79},{"text":"            /// 1. Load from file (base configuration)","highlight_start":1,"highlight_end":55},{"text":"            /// 2. Override with environment variables (higher priority)","highlight_start":1,"highlight_end":73},{"text":"            pub fn from_sources(file_path: &str) -> Result<Self, ConfigError> {","highlight_start":1,"highlight_end":80},{"text":"                // First load from file","highlight_start":1,"highlight_end":40},{"text":"                let mut config = match Self::from_file(file_path) {","highlight_start":1,"highlight_end":68},{"text":"                    Ok(cfg) => cfg,","highlight_start":1,"highlight_end":36},{"text":"                    Err(e) => {","highlight_start":1,"highlight_end":32},{"text":"                        log::warn!(\"Failed to load config from file: {}, using defaults\", e);","highlight_start":1,"highlight_end":94},{"text":"                        Self::default()","highlight_start":1,"highlight_end":40},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                // Then override with environment variables","highlight_start":1,"highlight_end":60},{"text":"                if let Err(e) = config.load_env() {","highlight_start":1,"highlight_end":52},{"text":"                    log::warn!(\"Failed to load config from environment: {}\", e);","highlight_start":1,"highlight_end":81},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                // Validate the final configuration","highlight_start":1,"highlight_end":52},{"text":"                config.validate()?;","highlight_start":1,"highlight_end":36},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                Ok(config)","highlight_start":1,"highlight_end":27},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            /// Merge with another configuration","highlight_start":1,"highlight_end":49},{"text":"            pub fn merge(&mut self, other: Self) {","highlight_start":1,"highlight_end":51},{"text":"                #(","highlight_start":1,"highlight_end":19},{"text":"                    self.#field_names = other.#field_names;","highlight_start":1,"highlight_end":60},{"text":"                )*","highlight_start":1,"highlight_end":19},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            /// Parse a string into a value of type T","highlight_start":1,"highlight_end":54},{"text":"            fn parse_value<T: FromStr>(value: &str) -> Result<T, ConfigError>","highlight_start":1,"highlight_end":78},{"text":"            where","highlight_start":1,"highlight_end":18},{"text":"                T::Err: std::fmt::Display,","highlight_start":1,"highlight_end":43},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                value.parse()","highlight_start":1,"highlight_end":30},{"text":"                    .map_err(|e| ConfigError::ParseError(format!(\"Failed to parse value '{}': {}\", value, e)))","highlight_start":1,"highlight_end":111},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            /// Parse a comma-separated string into a Vec<T>","highlight_start":1,"highlight_end":61},{"text":"            fn parse_array<T: FromStr>(value: &str) -> Result<Vec<T>, ConfigError>","highlight_start":1,"highlight_end":83},{"text":"            where","highlight_start":1,"highlight_end":18},{"text":"                T::Err: std::fmt::Display,","highlight_start":1,"highlight_end":43},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                value.split(',')","highlight_start":1,"highlight_end":33},{"text":"                    .map(|s| s.trim())","highlight_start":1,"highlight_end":39},{"text":"                    .filter(|s| !s.is_empty())","highlight_start":1,"highlight_end":47},{"text":"                    .map(|s| Self::parse_value::<T>(s))","highlight_start":1,"highlight_end":56},{"text":"                    .collect()","highlight_start":1,"highlight_end":31},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            /// Check if a type is Option<T>","highlight_start":1,"highlight_end":45},{"text":"            fn is_option_type(type_str: &str) -> bool {","highlight_start":1,"highlight_end":56},{"text":"                type_str.starts_with(\"Option < \")","highlight_start":1,"highlight_end":50},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            /// Extract inner type from Option<T>","highlight_start":1,"highlight_end":50},{"text":"            fn get_inner_type(type_str: &str) -> &str {","highlight_start":1,"highlight_end":56},{"text":"                if type_str.starts_with(\"Option < \") {","highlight_start":1,"highlight_end":55},{"text":"                    let start = \"Option < \".len();","highlight_start":1,"highlight_end":51},{"text":"                    let end = type_str.len() - 2; // Remove trailing \" >\"","highlight_start":1,"highlight_end":74},{"text":"                    &type_str[start..end]","highlight_start":1,"highlight_end":42},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    type_str","highlight_start":1,"highlight_end":29},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            /// Parse a string into an Option<T>","highlight_start":1,"highlight_end":49},{"text":"            fn parse_option<T: FromStr>(value: &str) -> Result<Option<T>, ConfigError>","highlight_start":1,"highlight_end":87},{"text":"            where","highlight_start":1,"highlight_end":18},{"text":"                T::Err: std::fmt::Display,","highlight_start":1,"highlight_end":43},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                if value.trim().is_empty() {","highlight_start":1,"highlight_end":45},{"text":"                    Ok(None)","highlight_start":1,"highlight_end":29},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    Ok(Some(Self::parse_value(value)?))","highlight_start":1,"highlight_end":56},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            /// Parse a string into a value based on its type","highlight_start":1,"highlight_end":62},{"text":"            fn parse_type(type_str: &str, value: &str) -> Result<Box<dyn std::any::Any>, ConfigError> {","highlight_start":1,"highlight_end":104},{"text":"                let inner_type = Self::get_inner_type(type_str);","highlight_start":1,"highlight_end":65},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                let result: Box<dyn std::any::Any> = match inner_type {","highlight_start":1,"highlight_end":72},{"text":"                    \"String\" => if Self::is_option_type(type_str) {","highlight_start":1,"highlight_end":68},{"text":"                        Box::new(Self::parse_option::<String>(value)?)","highlight_start":1,"highlight_end":71},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Box::new(Self::parse_value::<String>(value)?)","highlight_start":1,"highlight_end":70},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"i32\" => if Self::is_option_type(type_str) {","highlight_start":1,"highlight_end":65},{"text":"                        Box::new(Self::parse_option::<i32>(value)?)","highlight_start":1,"highlight_end":68},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Box::new(Self::parse_value::<i32>(value)?)","highlight_start":1,"highlight_end":67},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"i64\" => if Self::is_option_type(type_str) {","highlight_start":1,"highlight_end":65},{"text":"                        Box::new(Self::parse_option::<i64>(value)?)","highlight_start":1,"highlight_end":68},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Box::new(Self::parse_value::<i64>(value)?)","highlight_start":1,"highlight_end":67},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"u32\" => if Self::is_option_type(type_str) {","highlight_start":1,"highlight_end":65},{"text":"                        Box::new(Self::parse_option::<u32>(value)?)","highlight_start":1,"highlight_end":68},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Box::new(Self::parse_value::<u32>(value)?)","highlight_start":1,"highlight_end":67},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"u64\" => if Self::is_option_type(type_str) {","highlight_start":1,"highlight_end":65},{"text":"                        Box::new(Self::parse_option::<u64>(value)?)","highlight_start":1,"highlight_end":68},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Box::new(Self::parse_value::<u64>(value)?)","highlight_start":1,"highlight_end":67},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"f32\" => if Self::is_option_type(type_str) {","highlight_start":1,"highlight_end":65},{"text":"                        Box::new(Self::parse_option::<f32>(value)?)","highlight_start":1,"highlight_end":68},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Box::new(Self::parse_value::<f32>(value)?)","highlight_start":1,"highlight_end":67},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"f64\" => if Self::is_option_type(type_str) {","highlight_start":1,"highlight_end":65},{"text":"                        Box::new(Self::parse_option::<f64>(value)?)","highlight_start":1,"highlight_end":68},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Box::new(Self::parse_value::<f64>(value)?)","highlight_start":1,"highlight_end":67},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"bool\" => if Self::is_option_type(type_str) {","highlight_start":1,"highlight_end":66},{"text":"                        Box::new(Self::parse_option::<bool>(value)?)","highlight_start":1,"highlight_end":69},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Box::new(Self::parse_value::<bool>(value)?)","highlight_start":1,"highlight_end":68},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    _ => if type_str.starts_with(\"Vec < \") {","highlight_start":1,"highlight_end":61},{"text":"                        // Handle array types","highlight_start":1,"highlight_end":46},{"text":"                        let element_type = type_str.trim_start_matches(\"Vec < \").trim_end_matches(\" >\");","highlight_start":1,"highlight_end":105},{"text":"                        match element_type {","highlight_start":1,"highlight_end":45},{"text":"                            \"String\" => Box::new(Self::parse_array::<String>(value)?),","highlight_start":1,"highlight_end":87},{"text":"                            \"i32\" => Box::new(Self::parse_array::<i32>(value)?),","highlight_start":1,"highlight_end":81},{"text":"                            \"i64\" => Box::new(Self::parse_array::<i64>(value)?),","highlight_start":1,"highlight_end":81},{"text":"                            \"u32\" => Box::new(Self::parse_array::<u32>(value)?),","highlight_start":1,"highlight_end":81},{"text":"                            \"u64\" => Box::new(Self::parse_array::<u64>(value)?),","highlight_start":1,"highlight_end":81},{"text":"                            \"f32\" => Box::new(Self::parse_array::<f32>(value)?),","highlight_start":1,"highlight_end":81},{"text":"                            \"f64\" => Box::new(Self::parse_array::<f64>(value)?),","highlight_start":1,"highlight_end":81},{"text":"                            \"bool\" => Box::new(Self::parse_array::<bool>(value)?),","highlight_start":1,"highlight_end":83},{"text":"                            _ => return Err(ConfigError::ParseError(","highlight_start":1,"highlight_end":69},{"text":"                                format!(\"Unsupported array element type: {}\", element_type)","highlight_start":1,"highlight_end":92},{"text":"                            )),","highlight_start":1,"highlight_end":32},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        return Err(ConfigError::ParseError(","highlight_start":1,"highlight_end":60},{"text":"                            format!(\"Unsupported type: {}\", type_str)","highlight_start":1,"highlight_end":70},{"text":"                        ));","highlight_start":1,"highlight_end":28},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                Ok(result)","highlight_start":1,"highlight_end":27},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            /// Load configuration from environment variables, overriding existing values","highlight_start":1,"highlight_end":90},{"text":"            pub fn load_env(&mut self) -> Result<(), ConfigError> {","highlight_start":1,"highlight_end":68},{"text":"                #(","highlight_start":1,"highlight_end":19},{"text":"                    if let Ok(value) = std::env::var(#field_env_names) {","highlight_start":1,"highlight_end":73},{"text":"                        let field_type = stringify!(#field_types);","highlight_start":1,"highlight_end":67},{"text":"                        let parsed_value = Self::parse_type(field_type, &value)?;","highlight_start":1,"highlight_end":82},{"text":"                        ","highlight_start":1,"highlight_end":25},{"text":"                        // Downcast to the correct type","highlight_start":1,"highlight_end":56},{"text":"                        if let Some(v) = parsed_value.downcast_ref() {","highlight_start":1,"highlight_end":71},{"text":"                            self.#field_names = v.clone();","highlight_start":1,"highlight_end":59},{"text":"                        } else {","highlight_start":1,"highlight_end":33},{"text":"                            return Err(ConfigError::ParseError(","highlight_start":1,"highlight_end":64},{"text":"                                format!(\"Type mismatch for field {}\", stringify!(#field_names))","highlight_start":1,"highlight_end":96},{"text":"                            ));","highlight_start":1,"highlight_end":32},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    } else if Self::is_option_type(stringify!(#field_types)) {","highlight_start":1,"highlight_end":79},{"text":"                        // For Option types, set to None if environment variable is not present","highlight_start":1,"highlight_end":96},{"text":"                        self.#field_names = None;","highlight_start":1,"highlight_end":50},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                )*","highlight_start":1,"highlight_end":19},{"text":"                Ok(())","highlight_start":1,"highlight_end":23},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            /// Create a new builder","highlight_start":1,"highlight_end":37},{"text":"            pub fn builder() -> #name Builder {","highlight_start":1,"highlight_end":48},{"text":"                #name Builder::default()","highlight_start":1,"highlight_end":41},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // Private validation helper","highlight_start":1,"highlight_end":41},{"text":"            fn validate_field<T>(&self, field_name: &str, value: &T) -> Result<(), ConfigError> {","highlight_start":1,"highlight_end":98},{"text":"                // Add field-specific validation based on attributes","highlight_start":1,"highlight_end":69},{"text":"                #(","highlight_start":1,"highlight_end":19},{"text":"                    if field_name == stringify!(#field_names) {","highlight_start":1,"highlight_end":64},{"text":"                        for attr in #field_attrs {","highlight_start":1,"highlight_end":51},{"text":"                            if attr.path().is_ident(\"config\") {","highlight_start":1,"highlight_end":64},{"text":"                                if let Ok(meta) = attr.parse_nested_meta(|meta| {","highlight_start":1,"highlight_end":82},{"text":"                                    if meta.path.is_ident(\"validate\") {","highlight_start":1,"highlight_end":72},{"text":"                                        // Parse validation rules","highlight_start":1,"highlight_end":66},{"text":"                                        meta.parse_nested_meta(|nested| {","highlight_start":1,"highlight_end":74},{"text":"                                            if nested.path.is_ident(\"range\") {","highlight_start":1,"highlight_end":79},{"text":"                                                // Handle range validation","highlight_start":1,"highlight_end":75},{"text":"                                                let min = nested.value()?.parse_nested_meta(|m| {","highlight_start":1,"highlight_end":98},{"text":"                                                    if m.path.is_ident(\"min\") {","highlight_start":1,"highlight_end":80},{"text":"                                                        Ok(m.value()?.parse()?)","highlight_start":1,"highlight_end":80},{"text":"                                                    } else {","highlight_start":1,"highlight_end":61},{"text":"                                                        Ok(std::u64::MIN)","highlight_start":1,"highlight_end":74},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                })?;","highlight_start":1,"highlight_end":53},{"text":"                                                let max = nested.value()?.parse_nested_meta(|m| {","highlight_start":1,"highlight_end":98},{"text":"                                                    if m.path.is_ident(\"max\") {","highlight_start":1,"highlight_end":80},{"text":"                                                        Ok(m.value()?.parse()?)","highlight_start":1,"highlight_end":80},{"text":"                                                    } else {","highlight_start":1,"highlight_end":61},{"text":"                                                        Ok(std::u64::MAX)","highlight_start":1,"highlight_end":74},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                })?;","highlight_start":1,"highlight_end":53},{"text":"                                                ","highlight_start":1,"highlight_end":49},{"text":"                                                // Perform range validation","highlight_start":1,"highlight_end":76},{"text":"                                                let value = value.to_string().parse::<u64>()","highlight_start":1,"highlight_end":93},{"text":"                                                    .map_err(|_| ConfigError::ValidationError(","highlight_start":1,"highlight_end":95},{"text":"                                                        format!(\"Invalid value for {}\", field_name)","highlight_start":1,"highlight_end":100},{"text":"                                                    ))?;","highlight_start":1,"highlight_end":57},{"text":"                                                if value < min || value > max {","highlight_start":1,"highlight_end":80},{"text":"                                                    return Err(ConfigError::ValidationError(","highlight_start":1,"highlight_end":93},{"text":"                                                        format!(\"{} must be between {} and {}\", field_name, min, max)","highlight_start":1,"highlight_end":118},{"text":"                                                    ));","highlight_start":1,"highlight_end":56},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                            }","highlight_start":1,"highlight_end":46},{"text":"                                            Ok(())","highlight_start":1,"highlight_end":51},{"text":"                                        })?;","highlight_start":1,"highlight_end":45},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                    Ok(())","highlight_start":1,"highlight_end":43},{"text":"                                }) {","highlight_start":1,"highlight_end":37},{"text":"                                    if let Err(e) = meta {","highlight_start":1,"highlight_end":59},{"text":"                                        return Err(ConfigError::ValidationError(e.to_string()));","highlight_start":1,"highlight_end":97},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                )*","highlight_start":1,"highlight_end":19},{"text":"                Ok(())","highlight_start":1,"highlight_end":23},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            /// Convert configuration to a different type","highlight_start":1,"highlight_end":58},{"text":"            pub fn convert<T: TryFrom<Self>>(&self) -> Result<T, ConfigError> {","highlight_start":1,"highlight_end":80},{"text":"                T::try_from(self.clone())","highlight_start":1,"highlight_end":42},{"text":"                    .map_err(|_| ConfigError::ConversionError(","highlight_start":1,"highlight_end":63},{"text":"                        format!(\"Failed to convert {} to target type\", stringify!(#name))","highlight_start":1,"highlight_end":90},{"text":"                    ))","highlight_start":1,"highlight_end":23},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        /// Builder for #name","highlight_start":1,"highlight_end":30},{"text":"        #[derive(Default)]","highlight_start":1,"highlight_end":27},{"text":"        pub struct #name Builder {","highlight_start":1,"highlight_end":35},{"text":"            #(","highlight_start":1,"highlight_end":15},{"text":"                #field_names: #builder_field_types,","highlight_start":1,"highlight_end":52},{"text":"            )*","highlight_start":1,"highlight_end":15},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl #name Builder {","highlight_start":1,"highlight_end":29},{"text":"            #(","highlight_start":1,"highlight_end":15},{"text":"                pub fn #field_names(mut self, value: #field_types) -> Self {","highlight_start":1,"highlight_end":77},{"text":"                    self.#field_names = Some(value);","highlight_start":1,"highlight_end":53},{"text":"                    self","highlight_start":1,"highlight_end":25},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            )*","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            pub fn build(self) -> Result<#name, ConfigError> {","highlight_start":1,"highlight_end":63},{"text":"                Ok(#name {","highlight_start":1,"highlight_end":27},{"text":"                    #(","highlight_start":1,"highlight_end":23},{"text":"                        #field_names: self.#field_names.ok_or_else(|| {","highlight_start":1,"highlight_end":72},{"text":"                            ConfigError::BuildError(format!(\"Missing required field: {}\", stringify!(#field_names)))","highlight_start":1,"highlight_end":117},{"text":"                        })?,","highlight_start":1,"highlight_end":29},{"text":"                    )*","highlight_start":1,"highlight_end":23},{"text":"                })","highlight_start":1,"highlight_end":19},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl Default for #name {","highlight_start":1,"highlight_end":33},{"text":"            fn default() -> Self {","highlight_start":1,"highlight_end":35},{"text":"                Self {","highlight_start":1,"highlight_end":23},{"text":"                    #(","highlight_start":1,"highlight_end":23},{"text":"                        #field_names: {","highlight_start":1,"highlight_end":40},{"text":"                            let mut default_value = None;","highlight_start":1,"highlight_end":58},{"text":"                            for attr in #field_attrs {","highlight_start":1,"highlight_end":55},{"text":"                                if attr.path().is_ident(\"config\") {","highlight_start":1,"highlight_end":68},{"text":"                                    if let Ok(meta) = attr.parse_nested_meta(|meta| {","highlight_start":1,"highlight_end":86},{"text":"                                        if meta.path.is_ident(\"default\") {","highlight_start":1,"highlight_end":75},{"text":"                                            default_value = Some(meta.value()?.parse()?);","highlight_start":1,"highlight_end":90},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                        Ok(())","highlight_start":1,"highlight_end":47},{"text":"                                    }) {","highlight_start":1,"highlight_end":41},{"text":"                                        if let Some(value) = default_value {","highlight_start":1,"highlight_end":77},{"text":"                                            return value;","highlight_start":1,"highlight_end":58},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            Default::default()","highlight_start":1,"highlight_end":47},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                    )*","highlight_start":1,"highlight_end":23},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[async_trait::async_trait]","highlight_start":1,"highlight_end":36},{"text":"        impl ConfigReload for #name {","highlight_start":1,"highlight_end":38},{"text":"            async fn reload(&mut self) -> Result<(), ConfigError> {","highlight_start":1,"highlight_end":68},{"text":"                // Try loading from file first","highlight_start":1,"highlight_end":47},{"text":"                if let Ok(new_config) = Self::from_file(\"config.yml\") {","highlight_start":1,"highlight_end":72},{"text":"                    *self = new_config;","highlight_start":1,"highlight_end":40},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                // Then override with environment variables","highlight_start":1,"highlight_end":60},{"text":"                self.load_env()?;","highlight_start":1,"highlight_end":34},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                // Validate after reload","highlight_start":1,"highlight_end":41},{"text":"                self.validate()?;","highlight_start":1,"highlight_end":34},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                Ok(())","highlight_start":1,"highlight_end":23},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // Implement serialization traits","highlight_start":1,"highlight_end":42},{"text":"        impl serde::Serialize for #name {","highlight_start":1,"highlight_end":42},{"text":"            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>","highlight_start":1,"highlight_end":77},{"text":"            where","highlight_start":1,"highlight_end":18},{"text":"                S: serde::Serializer,","highlight_start":1,"highlight_end":38},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use serde::ser::SerializeStruct;","highlight_start":1,"highlight_end":49},{"text":"                let mut state = serializer.serialize_struct(stringify!(#name), #field_names.len())?;","highlight_start":1,"highlight_end":101},{"text":"                #(","highlight_start":1,"highlight_end":19},{"text":"                    state.serialize_field(stringify!(#field_names), &self.#field_names)?;","highlight_start":1,"highlight_end":90},{"text":"                )*","highlight_start":1,"highlight_end":19},{"text":"                state.end()","highlight_start":1,"highlight_end":28},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<'de> serde::Deserialize<'de> for #name {","highlight_start":1,"highlight_end":54},{"text":"            fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>","highlight_start":1,"highlight_end":73},{"text":"            where","highlight_start":1,"highlight_end":18},{"text":"                D: serde::Deserializer<'de>,","highlight_start":1,"highlight_end":45},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use serde::de::{self, Visitor};","highlight_start":1,"highlight_end":48},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                struct ConfigVisitor;","highlight_start":1,"highlight_end":38},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                impl<'de> Visitor<'de> for ConfigVisitor {","highlight_start":1,"highlight_end":59},{"text":"                    type Value = #name;","highlight_start":1,"highlight_end":40},{"text":"                    ","highlight_start":1,"highlight_end":21},{"text":"                    fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {","highlight_start":1,"highlight_end":99},{"text":"                        formatter.write_str(concat!(\"struct \", stringify!(#name)))","highlight_start":1,"highlight_end":83},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    ","highlight_start":1,"highlight_end":21},{"text":"                    fn visit_map<V>(self, mut map: V) -> Result<#name, V::Error>","highlight_start":1,"highlight_end":81},{"text":"                    where","highlight_start":1,"highlight_end":26},{"text":"                        V: de::MapAccess<'de>,","highlight_start":1,"highlight_end":47},{"text":"                    {","highlight_start":1,"highlight_end":22},{"text":"                        let mut config = #name::default();","highlight_start":1,"highlight_end":59},{"text":"                        while let Some(key) = map.next_key()? {","highlight_start":1,"highlight_end":64},{"text":"                            match key {","highlight_start":1,"highlight_end":40},{"text":"                                #(","highlight_start":1,"highlight_end":35},{"text":"                                    stringify!(#field_names) => {","highlight_start":1,"highlight_end":66},{"text":"                                        config.#field_names = map.next_value()?;","highlight_start":1,"highlight_end":81},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                )*","highlight_start":1,"highlight_end":35},{"text":"                                _ => {","highlight_start":1,"highlight_end":39},{"text":"                                    let _ = map.next_value::<de::IgnoredAny>()?;","highlight_start":1,"highlight_end":81},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Ok(config)","highlight_start":1,"highlight_end":35},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                deserializer.deserialize_map(ConfigVisitor)","highlight_start":1,"highlight_end":60},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"quote!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":17600,"byte_end":17618,"line_start":500,"line_end":500,"column_start":5,"column_end":23,"is_primary":false,"text":[{"text":"    macro_rules! quote {","highlight_start":5,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_each_token!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":29528,"byte_end":29557,"line_start":829,"line_end":829,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"macro_rules! quote_each_token {","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_tokens_with_context!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":30486,"byte_end":30524,"line_start":863,"line_end":863,"column_start":1,"column_end":39,"is_primary":false,"text":[{"text":"macro_rules! quote_tokens_with_context {","highlight_start":1,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_token_with_context!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":31280,"byte_end":31317,"line_start":893,"line_end":893,"column_start":1,"column_end":38,"is_primary":false,"text":[{"text":"macro_rules! quote_token_with_context {","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_token!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":37501,"byte_end":37525,"line_start":1024,"line_end":1024,"column_start":1,"column_end":25,"is_primary":false,"text":[{"text":"macro_rules! quote_token {","highlight_start":1,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":17600,"byte_end":17618,"line_start":500,"line_end":500,"column_start":5,"column_end":23,"is_primary":false,"text":[{"text":"    macro_rules! quote {","highlight_start":5,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_each_token!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":29528,"byte_end":29557,"line_start":829,"line_end":829,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"macro_rules! quote_each_token {","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_tokens_with_context!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":30486,"byte_end":30524,"line_start":863,"line_end":863,"column_start":1,"column_end":39,"is_primary":false,"text":[{"text":"macro_rules! quote_tokens_with_context {","highlight_start":1,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_token_with_context!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":31280,"byte_end":31317,"line_start":893,"line_end":893,"column_start":1,"column_end":38,"is_primary":false,"text":[{"text":"macro_rules! quote_token_with_context {","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_token!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":37501,"byte_end":37525,"line_start":1024,"line_end":1024,"column_start":1,"column_end":25,"is_primary":false,"text":[{"text":"macro_rules! quote_token {","highlight_start":1,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":17600,"byte_end":17618,"line_start":500,"line_end":500,"column_start":5,"column_end":23,"is_primary":false,"text":[{"text":"    macro_rules! quote {","highlight_start":5,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_each_token!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":29528,"byte_end":29557,"line_start":829,"line_end":829,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"macro_rules! quote_each_token {","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_tokens_with_context!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":30486,"byte_end":30524,"line_start":863,"line_end":863,"column_start":1,"column_end":39,"is_primary":false,"text":[{"text":"macro_rules! quote_tokens_with_context {","highlight_start":1,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_token_with_context!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":31280,"byte_end":31317,"line_start":893,"line_end":893,"column_start":1,"column_end":38,"is_primary":false,"text":[{"text":"macro_rules! quote_token_with_context {","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_token!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":37501,"byte_end":37525,"line_start":1024,"line_end":1024,"column_start":1,"column_end":25,"is_primary":false,"text":[{"text":"macro_rules! quote_token {","highlight_start":1,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":17600,"byte_end":17618,"line_start":500,"line_end":500,"column_start":5,"column_end":23,"is_primary":false,"text":[{"text":"    macro_rules! quote {","highlight_start":5,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_each_token!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":29528,"byte_end":29557,"line_start":829,"line_end":829,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"macro_rules! quote_each_token {","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_tokens_with_context!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":30486,"byte_end":30524,"line_start":863,"line_end":863,"column_start":1,"column_end":39,"is_primary":false,"text":[{"text":"macro_rules! quote_tokens_with_context {","highlight_start":1,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_token_with_context!","def_site_span":{"file_name":"C:\\Users\\tzw\\.cargo\\registry\\src\\rsproxy.cn-0dccff568467c15b\\quote-1.0.37\\src/lib.rs","byte_start":31280,"byte_end":31317,"line_start":893,"line_end":893,"column_start":1,"column_end":38,"is_primary":false,"text":[{"text":"macro_rules! quote_token_with_context {","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `ToTokens`:\n  &'a T\n  &'a mut T\n  Abstract\n  AndAnd\n  AndEq\n  AngleBracketedGenericArguments\n  Arm\n  As\nand 306 others","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: the trait bound `Vec<&Option<proc_macro2::Ident>>: ToTokens` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mcrates\\genies_derive\\src\\lib.rs:70:20\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m70\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    let expanded = quote! {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m____________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m71\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        impl #name {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m72\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            /// Validate the configuration\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m73\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            pub fn validate(&self) -> Result<(), ConfigError> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m460\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m461\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    };\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_____\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `ToTokens` is not implemented for `Vec<&Option<proc_macro2::Ident>>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: the following other types implement trait `ToTokens`:\u001b[0m\n\u001b[0m              &'a T\u001b[0m\n\u001b[0m              &'a mut T\u001b[0m\n\u001b[0m              Abstract\u001b[0m\n\u001b[0m              AndAnd\u001b[0m\n\u001b[0m              AndEq\u001b[0m\n\u001b[0m              AngleBracketedGenericArguments\u001b[0m\n\u001b[0m              Arm\u001b[0m\n\u001b[0m              As\u001b[0m\n\u001b[0m            and 306 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `$crate::quote_token_with_context` which comes from the expansion of the macro `quote` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 6 previous errors; 3 warnings emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: aborting due to 6 previous errors; 3 warnings emitted\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"For more information about this error, try `rustc --explain E0277`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;15mFor more information about this error, try `rustc --explain E0277`.\u001b[0m\n"}
